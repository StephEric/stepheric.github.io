<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python文件操作</title>
    <url>/2022/08/08/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本篇不断汇总介绍Python中常见的文件操作</p>
<span id="more"></span>
<h2 id="文件读入">文件读入</h2>
<p>open()参考 <a
href="https://www.runoob.com/python/python-func-open.html">Python
open()</a></p>
<h3 id="读入模式">读入模式</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>命令 command</th>
<th>含义 meaning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"r"</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr class="even">
<td>"w"</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="odd">
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
</tbody>
</table>
<h3 id="空文件处理">空文件处理</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># &quot;r&quot; 代表只读</span></span><br><span class="line">    <span class="comment"># encoding 设置文件编码</span></span><br><span class="line">    file = <span class="built_in">open</span>(input_file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;do your work&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="读入第一行">读入第一行</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.readline()</span><br></pre></td></tr></table></figure>
<h3 id="读入后按逗号分割">读入后按逗号分割</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    value = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>QT界面部件与设置</title>
    <url>/2022/07/19/QT%E7%95%8C%E9%9D%A2%E9%83%A8%E4%BB%B6%E4%B8%8E%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="qt界面部件与设置">QT界面部件与设置</h1>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidworks笔记</title>
    <url>/2021/10/30/Solidworks/</url>
    <content><![CDATA[<h1 id="solidworks笔记">Solidworks笔记</h1>
<blockquote><h2 id="期中考试">期中考试</h2>
<p>三个满分 平均分84</p>
</blockquote>
<h2 id="solidworks概述">Solidworks概述</h2>
<p>三维建模，设计颜色，赋予材质进行分析，运动仿真（校验设置功能完整性、动力仿真）
模块化功能</p>
<span id="more"></span>
<h2 id="solidworks基本操作">Solidworks基本操作</h2>
<p>零件：单个实体 装配体：多个实体（通过运动附），固连
工程图：面向实际</p>
<p>按照基准次序 定义材质 红绿灯更新当前参数</p>
<h3 id="剪裁实体">剪裁实体</h3>
<p>选择合适剪裁选项</p>
<p>旋转实体 等距实体 复制偏移一个距离 参考几何体 定义画图起始点 曲线</p>
<p>一开始导入的零件是基准平台 装备体里可以嵌套装备体</p>
<p>挖空 点击拉伸切除（完全贯穿） 配合 分别选面进行配合 （重合
指定距离）</p>
<h3 id="工程图">工程图</h3>
<p>重新编辑图纸 跟着鼠标的是视图</p>
]]></content>
      <categories>
        <category>Solidworks</category>
      </categories>
      <tags>
        <tag>Solidworks</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code 环境配置</title>
    <url>/2022/09/18/VS%20code%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="vs-code配置cc编译环境">VS Code配置C/C++编译环境</h1>
<h2 id="前期准备">前期准备</h2>
<p>安装MinGW64，把编译器所在的目录添加到环境变量<code>Path</code>中</p>
<h2 id="组织文件结构">组织文件结构</h2>
<p>单文件编程，将可执行文件统一放在<code>bin</code>文件夹下</p>
<p>多文件编程，不需要单独的bin目录</p>
<span id="more"></span>
<p>更快地模拟命令行的过程，这是通过<code>.vscode</code>文件夹下的<code>json</code>配置文件实现的，这些<code>json</code>文件怎么写是由vscode开发团队规定的（感兴趣可以去看官方的文档），其中一个是tasks.json，task是任务的意思，我们的编译和运行就是我们想要vscode执行的任务</p>
<p>配置需要与文件结构严格一致</p>
<h3 id="tasks.json"><code>tasks.json</code></h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是‘构建（build）’任务</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">//任务名称，可以更改，不过不建议改</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span> <span class="comment">//任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//编译命令，这里是gcc，编译c++的话换成g++</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="comment">//方括号里是传给gcc命令的一系列参数，用于实现一些功能</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//指定要编译的是当前文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">//指定输出文件的路径和名称</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//承接上一步的-o，让可执行文件输出到源码文件所在的文件夹下的bin文件夹内，并且让它的名字和源码文件相同</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">//生成和调试有关的信息</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span>  <span class="comment">// 静态链接libgcc</span></span><br><span class="line">                <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span><span class="punctuation">,</span> <span class="comment">// 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++11</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//group表示‘组’，我们可以有很多的task，然后把他们放在一个‘组’里</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span><span class="comment">//表示这一组任务类型是构建</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="comment">//表示这个任务是当前这组任务中的默认任务</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//执行这个任务时的一些其他设定</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//表示在执行任务时在终端要有输出</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span> <span class="comment">//执行任务时是否跳转到终端面板，可以为always，silent，never</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//设为true后可以使执行task时焦点聚集在终端，但对编译来说，设为true没有意义，因为运行的时候才涉及到输入</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span> <span class="comment">//每次执行这个task时都新建一个终端面板，也可以设置为shared，共用一个面板，不过那样会出现‘任务将被终端重用’的提示，比较烦人</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span> <span class="comment">//捕捉编译时编译器在终端里显示的报错信息，将其显示在vscode的‘问题’面板里</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是‘运行(run)’任务，一些设置与上面的构建任务性质相同</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">//任务依赖，因为要运行必须先构建，所以执行这个任务前必须先执行build任务，</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//执行exe文件，只需要指定这个exe文件在哪里就好</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="comment">//这一组是‘测试’组，将run任务放在test组里方便我们用快捷键执行</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//这个就设置为true了，运行任务后将焦点聚集到终端，方便进行输入</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="launch.json"><code>launch.json</code></h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是我们的‘调试(Debug)’配置</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 程序调试时传递给程序的命令行参数，这里设为空即可</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，此处为源码文件所在目录</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 环境变量，这里设为空即可</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端</span></span><br><span class="line">            <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，新手调试用不到</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定连接的调试器，gdb是minGW中的调试程序</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径，注意间隔是\\</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span> <span class="comment">// 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅编译（构建Configuration），使用快捷键<code>ctrl+shift+B</code></li>
<li>编译+运行（run test
task），使用自定义快捷键<code>ctrl+alt+F5</code></li>
<li>调试，直接用调试快捷键<code>F5</code>，设置断点快捷键是<code>F9</code></li>
</ul>
<h2 id="可能出现的问题">可能出现的问题</h2>
<h3 id="reused-by-task"><code>reused by task</code></h3>
<p>按照在task中的设置，每次执行一个task就会打开一个新的终端面板</p>
<h1 id="section"></h1>
<h2 id="多文件程序">多文件程序</h2>
<p><strong>多文件tasks.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//写c++换成g++</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\*.c&quot;</span><span class="punctuation">,</span> <span class="comment">//写c++把 *.c 换成 *.cpp</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span>   </span><br><span class="line">                <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span><span class="punctuation">,</span>  <span class="comment">//写c++换成c++标准</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>多文件launch.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VS Code</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>VS Code</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用conda进行环境管理和包管理</title>
    <url>/2022/07/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8anaconda%E8%BF%9B%E8%A1%8CPython%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1
id="使用conda进行环境管理和包管理"><strong>使用conda进行环境管理和包管理</strong></h1>
<p>conda是anaconda中的环境管理器和包管理器。</p>
<p>对于conda的操作都发生在命令行内，我们可以打开Anaconda
Prompt进行操作。或者在项目根目录下使用终端进行操作。</p>
<span id="more"></span>
<h2 id="conda总述"><strong>1. conda总述</strong></h2>
<p>在使用conda前，我们先检查conda是否已经被安装，以及当前版本是否是最新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查conda是否已经安装好，此命令会返回你安装Anaconda软件的版本</span></span><br><span class="line">conda --version</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; conda 4.3.40</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过以下命令升级conda到最新版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有新版本可用，在提示proceed ([y]/n)? 中输入y进行升级</span></span><br><span class="line">conda update conda</span><br></pre></td></tr></table></figure>
<h3 id="什么是虚拟环境">什么是虚拟环境？</h3>
<p>虚拟环境是一种将Python解释器和安装的包从主系统环境中隔离出来的机制，使得您可以在同一台计算机上同时管理多个独立的Python环境。</p>
<p>使用Anaconda，您可以创建具有独立Python解释器和软件包集合的虚拟环境。这使得您可以为不同的项目或任务创建干净的、隔离的Python环境，每个环境可以具有不同的Python版本和库依赖，而不会相互干扰。</p>
<p>您可以使用Anaconda的命令行工具（如<code>conda</code>）或Anaconda
Navigator图形用户界面来创建和管理这些虚拟环境。通过创建虚拟环境，您可以避免在全局范围内安装软件包，从而降低包冲突和管理依赖关系的难度。这对于项目之间的隔离和管理非常有用，同时也是一种良好的实践，特别是在开发和部署Python应用程序时。</p>
<h3 id="虚拟环境与实际环境的区别">虚拟环境与实际环境的区别</h3>
<p>虚拟环境和实际环境（也称为全局环境或系统环境）之间有几个主要的区别：</p>
<ol type="1">
<li>隔离性：
<ul>
<li>虚拟环境：创建虚拟环境时，它会在系统环境中创建一个独立的隔离环境。在虚拟环境中，您可以安装和管理特定的Python解释器版本和软件包，而不会影响其他虚拟环境或全局环境。这种隔离性允许您在不同的项目中使用不同的Python版本和依赖项，避免包冲突和版本问题。</li>
<li>实际环境：实际环境是系统的全局环境，其中安装的所有Python解释器和软件包对整个系统可见和共享。因此，全局环境中的更改可能会影响所有项目和应用程序，可能导致依赖冲突和意外行为。</li>
</ul></li>
<li>独立性：
<ul>
<li>虚拟环境：虚拟环境是独立于系统环境的，它们可以在同一台计算机上同时存在多个，每个虚拟环境都是独立的实体。</li>
<li>实际环境：实际环境是整个系统的Python环境，没有明确定义的隔离边界。</li>
</ul></li>
<li>安装和管理：
<ul>
<li>虚拟环境：创建和管理虚拟环境通常由特定的工具负责，例如Anaconda中的<code>conda</code>命令或Python中的<code>venv</code>（Python
3.3+）或<code>virtualenv</code>工具。这些工具使得创建、激活和删除虚拟环境变得非常简单。</li>
<li>实际环境：在全局环境中安装和管理软件包通常需要管理员权限，并且可能更容易导致不希望的系统级更改。</li>
</ul></li>
<li>用途：
<ul>
<li>虚拟环境：用于隔离和管理项目的依赖关系，使得项目开发和部署更加可控和可靠。</li>
<li>实际环境：是系统的全局Python环境，可以用于一般的Python开发和运行环境。</li>
</ul></li>
</ol>
<h3
id="相同版本的包在各个虚拟环境不会重复占用空间">相同版本的包在各个虚拟环境不会重复占用空间</h3>
<p>在绝大多数情况下，虚拟环境之间采用相同版本的包不会重复安装或重复占用存储空间。这是因为虚拟环境是独立的，它们使用硬链接（hard
links）的方式来共享包，而不是复制包的实际文件。</p>
<p>当您在创建一个新的虚拟环境时，它会使用现有的Python解释器，并在指定位置创建一个新的目录结构，其中包括一份完整的包列表，以满足虚拟环境的依赖。然而，在文件系统级别上，并不是将包的内容复制到新的虚拟环境目录中。相反，虚拟环境目录中的包实际上只是指向全局环境中已经安装的包的硬链接。</p>
<p>由于硬链接指向同一个物理文件，虚拟环境之间共享的包不会重复占用额外的存储空间。这也是虚拟环境的一个优势，因为它允许您在系统上创建多个独立的Python环境，而不会浪费大量的存储空间来存储重复的包。</p>
<p>需要注意的是，某些特殊情况下，如果您在全局环境中进行不当的修改或删除包，可能会影响到虚拟环境之间的包的完整性。因此，建议仍然保持虚拟环境的独立性，并使用虚拟环境管理工具来安装、更新和删除包，以确保环境的稳定性和一致性。</p>
<h3 id="anaconda与miniconda的区别">AnaConda与MiniConda的区别</h3>
<p>Anaconda和Miniconda都是由Anaconda,
Inc.提供的Python发行版本，它们有一些区别：</p>
<ol type="1">
<li>安装包的大小和内容：
<ul>
<li>Anaconda：Anaconda是一个大型的Python发行版，包含了大量的预安装的科学计算和数据科学软件包，如NumPy、Pandas、Matplotlib、SciPy、Jupyter等，以及一些常用的数据分析工具和库。Anaconda安装包的大小通常在数GB左右。</li>
<li>Miniconda：Miniconda是一个更轻量级的Python发行版，它只包含了最基本的Python解释器和Conda包管理器，没有预安装其他任何额外的软件包。安装Miniconda后，您可以根据需要自己安装所需的软件包。Miniconda安装包的大小通常在几十MB左右。</li>
</ul></li>
<li>默认安装的软件包：
<ul>
<li>Anaconda：Anaconda默认安装了大量的科学计算和数据分析相关的软件包，适合需要快速开始数据科学工作的用户。</li>
<li>Miniconda：Miniconda只包含了基本的Python解释器和Conda包管理器，用户需要根据自己的需求手动安装所需的软件包。</li>
</ul></li>
</ol>
<h2 id="环境管理"><strong>2. 环境管理</strong></h2>
<p>环境管理是Python使用中的一大好习惯，如果你不想在一遍遍重装Python和系统中折腾循环，那么环境管理是学习Python的过程中非常必要的一环。现在我们用conda进行环境管理。</p>
<h3 id="创建环境">创建环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个环境名为py34，指定Python版本是3.4</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span></span><br><span class="line">conda create --name py34 python=3.4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过创建环境，我们可以使用不同版本的Python</span></span><br><span class="line">conda create --name py27 python=2.7</span><br></pre></td></tr></table></figure>
<h3 id="激活环境">激活环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在windows环境下使用activate激活</span></span><br><span class="line">activate py34</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Linux &amp; Mac中使用<span class="built_in">source</span> activate激活</span></span><br><span class="line">source activate py34</span><br></pre></td></tr></table></figure>
<p>激活后，会发现terminal输入的地方多了(py34)的字样，这表示我们已经进入了py34的环境中。</p>
<h3 id="克隆环境">克隆环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n conda-env2 --clone conda-env1</span><br></pre></td></tr></table></figure>
<p><code>conda-env2</code>是新创建的环境，<code>conda-env1</code>是旧环境</p>
<h3 id="重命名环境">重命名环境</h3>
<ol type="1">
<li>进入你的Anaconda安装目录</li>
<li>再进入目录下的<code>envs</code>目录</li>
<li>找到你要重命名的环境的同名文件夹，给这个文件夹重命名，这样就成功给环境重命名了。</li>
</ol>
<h3 id="退出环境">退出环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在windows环境下使用deactivate</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Linux &amp; Mac中使用<span class="built_in">source</span> deactivate</span></span><br><span class="line">source deactivate</span><br></pre></td></tr></table></figure>
<h3 id="删除环境">删除环境</h3>
<p>如果你不想要这个名为py34的环境，可以通过以下命令删除这个环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n py34 --all</span><br></pre></td></tr></table></figure>
<p>可以通过以下命令查看已有的环境列表，现在py34已经不在这个列表里，所以我们知道它已经被删除了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure>
<h2 id="包管理"><strong>3. 包管理</strong></h2>
<p>我们使用conda进行第三方包的安装、卸载和更新。</p>
<p>对于包的下载，我们可以先设置国内镜像。这是因为<a
href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>的服务器在国外，所以conda在下载包的时候速度往往很慢。所幸清华TUNA镜像（<a
href="https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a>）有Anaconda仓库的镜像，我们将其加入conda的配置，即可解决这个问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加Anaconda的TUNA镜像</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p>接下来我们进行包的安装，请进入指定的环境中（比如上节中的py34），这里我们以pandas（一个数据处理和分析的包）为例进行操作。</p>
<h3 id="查看已安装的包">查看已安装的包</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用这条命令来查看在当前环境中，已安装的包和对应版本</span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure>
<h3 id="查找可安装的包">查找可安装的包</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们可以通过search命令检查pandas这个包是否可以通过conda来安装</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令返回了这个包的信息，所以是可以通过conda安装的</span></span><br><span class="line">conda search pandas</span><br></pre></td></tr></table></figure>
<h3 id="安装包">安装包</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过install安装pandas</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果pandas已经存在于环境中，会提示已经安装，否则在提示proceed ([y]/n)? 中输入y进行安装</span></span><br><span class="line">conda install pandas</span><br></pre></td></tr></table></figure>
<h3 id="更新包">更新包</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过update更新pandas</span></span><br><span class="line">conda update pandas</span><br></pre></td></tr></table></figure>
<h3 id="卸载包">卸载包</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过remove卸载pandas</span></span><br><span class="line">conda remove pandas</span><br></pre></td></tr></table></figure>
<p>以上就是conda对于包的安装、更新和卸载。值得一提的是，conda将conda、python等都视为包，因此，完全可以使用conda来管理conda和python的版本，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新conda到最新版本，这里conda被当作一个包处理</span> </span><br><span class="line">conda update conda </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样的，也可以更新anaconda到最新版本</span></span><br><span class="line">conda update anaconda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新python</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如我们所启用的环境是py34，使用的是python3.4,那么conda会将python升级为3.4.x系列中的最新版本</span></span><br><span class="line">conda update python </span><br></pre></td></tr></table></figure>
<h2 id="使用environment.yml管理conda环境">4.
使用<code>environment.yml</code>管理conda环境</h2>
<p><code>environment.yml</code>文件是一个YAML格式的文本文件，其中包含用于创建和配置Conda虚拟环境的信息，包括Python版本和需要安装的软件包列表。</p>
<p>下面是使用<code>environment.yml</code>的步骤：</p>
<ol type="1">
<li>创建<code>environment.yml</code>文件：在项目根目录下创建一个名为<code>environment.yml</code>的文本文件。</li>
<li>编辑<code>environment.yml</code>文件：使用文本编辑器打开<code>environment.yml</code>文件，并指定要创建的虚拟环境的名称、Python版本以及需要安装的软件包。例如：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">myenv</span>  <span class="comment"># 虚拟环境的名称</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.8</span>  <span class="comment"># 指定Python版本</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">numpy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pandas</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">matplotlib</span></span><br><span class="line">  <span class="comment"># 添加其他需要的包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>创建虚拟环境：使用<code>conda env create</code>命令根据<code>environment.yml</code>文件创建虚拟环境。执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>激活虚拟环境：虚拟环境创建后，使用以下命令激活虚拟环境：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate myenv</span><br></pre></td></tr></table></figure>
<p><code>conda activate myenv</code></p>
<p>这样就会进入名为<code>myenv</code>的虚拟环境，其中包含在<code>environment.yml</code>文件中指定的所有软件包和Python版本。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/C++/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<h1 id="c运算符重载基础">C++运算符重载基础</h1>
<p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献">参考文献</h1>
<p>[1] https://blog.csdn.net/qq_41854911/article/details/119392824</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的字符串操作</title>
    <url>/2022/10/07/C++/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本文梳理总结了C语言中的常见字符串操作</p>
<span id="more"></span>
<h2 id="读入">读入</h2>
<p><code>scanf("%s", s)</code> 读入一个字符串，以空格和换行为分界</p>
<p><code>gets(s)</code>
可以直接输入带空格的一行字符串，系统会将最后的换行符从缓冲区中取出然后丢弃</p>
<h3 id="gets"><code>gets()</code></h3>
<p>输入后自动添加<code>'\0'</code></p>
<h3 id="fgets"><code>fgets()</code></h3>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> size, FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>参数含义</p>
<ul>
<li><p><code>s</code>
代表要保存到的内存空间的首地址，可以是字符数组名，也可以是指向字符数组的字符指针变量名</p></li>
<li><p><code>size</code> 代表的是读取字符串的长度</p></li>
<li><p><code>stream</code> 表示从何种流中读取，可以是标准输入流
<code>stdin</code>，也可以是文件流</p></li>
</ul></li>
<li><p>补充说明</p>
<ul>
<li>比<code>gets</code>函数更安全</li>
<li><strong><code>fgets</code>的中间size参数直接赋值字符数组长度即可</strong></li>
<li>如果输入字符串长度没有超过<code>size-1</code>那么系统会将最后输入的换行符<code>'\n'</code>保存，剩余空间都用<code>'\0'</code>填充。<strong>所以输出时不用再加换行符<code>'\n'</code></strong></li>
</ul></li>
</ul>
<h2 id="比较">比较</h2>
<blockquote>
<p>比较方法：</p>
<ol type="1">
<li><code>bcmp()</code>，比较字符串的前n个字节是否相等;2.</li>
<li><code>strcmp()</code>，区分大小写地比较字符串;</li>
<li><code>stricmp()</code>，不区分大小写地比较字符串；</li>
<li><code>strncmp()</code>或<code>strnicmp()</code>，区分大小写地比较字符串的前n个字符。</li>
</ol>
</blockquote>
<h3 id="strcmp"><code>strcmp</code></h3>
<p>原型为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span></span>;</span><br></pre></td></tr></table></figure>
<p>【返回值】若参数s1 和s2 字符串相同则返回0。s1 若大于s2 则返回大于0
的值。s1 若小于s2 则返回小于0 的值。</p>
<h2 id="拷贝">拷贝</h2>
<h3 id="strcpy"><code>strcpy</code></h3>
<p>原型为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strcpy</span><span class="params">(<span class="type">char</span>* des,<span class="type">const</span> <span class="type">char</span>* source)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span>* r=des;   </span><br><span class="line">    <span class="built_in">assert</span>((des != <span class="literal">NULL</span>) &amp;&amp; (source != <span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">while</span>((*r++ = *source++)!=<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分割">分割</h2>
<h3 id="strtok"><code>strtok</code></h3>
<p><code>strtok</code> breaks string <strong>str</strong> into a series
of tokens using the delimiter.</p>
<p>将<code>delimiter</code>部分的字符转化为<code>\0</code></p>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strtok</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *delim)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>返回值</p>
<p>函数返回指向分割后第一个字符串的指针。如果没有子串，返回NULL</p></li>
<li><p>示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">char</span> str[<span class="number">80</span>] = <span class="string">&quot;This is - www.tutorialspoint.com - website&quot;</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span> s[<span class="number">2</span>] = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">   <span class="type">char</span> *token;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* get the first token */</span></span><br><span class="line">   token = <span class="built_in">strtok</span>(str, s);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* walk through other tokens */</span></span><br><span class="line">   <span class="keyword">while</span>( token != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">      <span class="built_in">printf</span>( <span class="string">&quot; %s\n&quot;</span>, token );</span><br><span class="line">      token = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, s);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="连接">连接</h2>
<h3 id="strcat"><code>strcat()</code></h3>
<p>将s2字符串连接到s1的后面，包括空字符</p>
<p>s1长度需要足够大，以容纳连接的字符串</p>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strcat</span><span class="params">(<span class="type">char</span>* s1, <span class="type">const</span> <span class="type">char</span>* s2)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="strncat"><code>strncat()</code></h3>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strncat</span><span class="params">(<span class="type">char</span>* s1, <span class="type">const</span> <span class="type">char</span>*s2, <span class="type">size_t</span> n)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>参数</p>
<ul>
<li><code>n</code>: 附加的字符串的最大长度</li>
</ul></li>
</ul>
<h2 id="大小写转换">大小写转换</h2>
<h3 id="strlwr"><code>strlwr()</code></h3>
<p>将字符串中大写字母换成小写字母</p>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strlwr</span><span class="params">(<span class="type">char</span>* s)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="strupr"><code>strupr()</code></h3>
<p>将字符串中大写字母换成小写字母</p>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strlwr</span><span class="params">(<span class="type">char</span>* s)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="转换为数值">转换为数值</h2>
<p>与非法字符停止转换，非法的字符也有返回值</p>
<p>需要引入头文件<code>&lt;stdlib.h&gt;</code></p>
<h3 id="atof"><code>atof()</code></h3>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">atof</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ns)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="atoi"><code>atoi()</code></h3>
<ul>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ns)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="输出">输出</h2>
<p><code>puts()</code> 直接输出一行字符串，末尾加上<code>\n</code></p>
<div class="note info"><p><code>scanf</code>输入<code>double</code>时必须使用<code>%lf</code></p>
</div>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言课程常用库</title>
    <url>/2022/10/27/C++/C%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<p>本文总结C语言课程学习中尝试用到的库函数与方法。</p>
<span id="more"></span>
<h2 id="math.h">math.h</h2>
<h3 id="powfloat-a-float-b">pow(float a, float b)</h3>
<p>注意返回值为浮点型</p>
<h3 id="absint-x">abs(int x)</h3>
<h3 id="fabsfloat-x">fabs(float x)</h3>
<p>注意浮点型取绝对值要使用<code>fabs()</code></p>
<h2 id="数据类型">数据类型</h2>
<h3 id="bool"><code>bool</code></h3>
<p>C语言中没有bool值，不可以使用<code>true / false</code></p>
<h3 id="unsigned"><code>unsigned</code></h3>
<p>不要在它减到0时继续往下减，否则会变成无穷大</p>
<h2 id="结构体">结构体</h2>
<p>结构体中不能包含函数，不推荐在定义结构体后直接声明变量。</p>
<p><strong>结构体作为数据类型，需要在前面加上<code>struct</code>，比如</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Time</span> <span class="built_in">devide</span>(<span class="keyword">struct</span> Time t1, <span class="keyword">struct</span> Time t2)&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环">循环</h2>
<p>不允许在<code>for</code>内定义变量</p>
<h2 id="指针与引用">指针与引用</h2>
<div class="note info"><p>C语言中没有引用</p>
</div>
<h2 id="报错汇总">报错汇总</h2>
<h3
id="是否忘记了向源中添加include-stdafx.h">是否忘记了向源中添加“#include
“stdafx.h“”</h3>
<p>对于每一个出错的.cpp文件，右键——》属性——》C/C++——》预编译头，选择不使用预编译头即可。</p>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的指针</title>
    <url>/2022/11/03/C++/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>本文总结C语言课程学习中用到的指针概念及操作。</p>
<span id="more"></span>
<h2 id="动态分配内存">动态分配内存</h2>
<h3 id="malloc"><code>malloc</code></h3>
<ul>
<li><p>功能描述</p>
<p>分配所要求的内存空间，并返回指向该空间的指针</p></li>
<li><p>函数原型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">malloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>参数</p>
<ul>
<li><code>size</code>指的是内存空间的<strong><em>字节大小</em></strong></li>
</ul></li>
<li><p>返回值</p>
<ul>
<li>分配成功，返回指向该空间的指针</li>
<li>分配失败，返回<code>NULL</code></li>
</ul></li>
<li><p>示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">char</span> *str;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Initial memory allocation */</span></span><br><span class="line">   str = (<span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(str, <span class="string">&quot;tutorialspoint&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;String = %s,  Address = %u\n&quot;</span>, str, str);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Reallocating memory */</span></span><br><span class="line">   str = (<span class="type">char</span> *) <span class="built_in">realloc</span>(str, <span class="number">25</span>);</span><br><span class="line">   <span class="built_in">strcat</span>(str, <span class="string">&quot;.com&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;String = %s,  Address = %u\n&quot;</span>, str, str);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">free</span>(str);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="bool"><code>bool</code></h3>
<p>C语言中没有bool值，不可以使用<code>true / false</code></p>
<h3 id="unsigned"><code>unsigned</code></h3>
<p>不要在它减到0时继续往下减，否则会变成无穷大</p>
<h2 id="结构体">结构体</h2>
<p>结构体中不能包含函数，不推荐在定义结构体后直接声明变量。</p>
<p><strong>结构体作为数据类型，需要在前面加上<code>struct</code>，比如</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Time</span> <span class="built_in">devide</span>(<span class="keyword">struct</span> Time t1, <span class="keyword">struct</span> Time t2)&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环">循环</h2>
<p>不允许在<code>for</code>内定义变量</p>
<h2 id="指针与引用">指针与引用</h2>
<div class="note info"><p>C语言中没有引用</p>
</div>
<h2 id="报错汇总">报错汇总</h2>
<h3
id="是否忘记了向源中添加include-stdafx.h">是否忘记了向源中添加“#include
“stdafx.h“”</h3>
<p>对于每一个出错的.cpp文件，右键——》属性——》C/C++——》预编译头，选择不使用预编译头即可。</p>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL中vector的常用函数</title>
    <url>/2022/09/25/C++/STL%E4%B8%ADvector%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<h1 id="c运算符重载基础">C++运算符重载基础</h1>
<p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>DS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2012报错解决汇总</title>
    <url>/2022/09/28/C++/VS2012%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>本文对被迫使用Visual Studio
2012中踩到的一些坑进行汇总，服务于《计算机语言与程序设计》的课程考试。其解决方法已过时，完全是因为某清大学只购买到了VS2012的版权。</p>
<span id="more"></span>
<h2 id="编辑器习惯配置">编辑器习惯配置</h2>
<p><strong><em>选项/环境/常规</em></strong> 颜色主题选择深色</p>
<p><strong><em>选项/环境/字体和颜色</em></strong> 选择
<code>Cascadia Code</code></p>
<h2 id="报错汇总">报错汇总</h2>
<h3
id="是否忘记了向源中添加include-stdafx.h">是否忘记了向源中添加“#include
“stdafx.h“”</h3>
<p>对于每一个出错的.cpp文件，右键——》属性——》C/C++——》预编译头，选择不使用预编译头即可。</p>
<h3 id="应该使用scanf_s">应该使用scanf_s</h3>
<ul>
<li><p>一种解决方法</p>
<ul>
<li><p>右击项目名，选择属性</p></li>
<li><p>在c/c++下选择Preprocessor（预处理器）</p></li>
<li><p>点击图示Preprocessor
Definitions，选择&lt;Edit…&gt;，添加预处理器定义<code>_CRT_SECURE_NO_WARNINGS</code></p></li>
</ul></li>
<li><p>或者，直接添加宏定义</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br></pre></td></tr></table></figure>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>VS2012</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>VS2012</tag>
      </tags>
  </entry>
  <entry>
    <title>scanf与printf的用法及注意事项</title>
    <url>/2022/09/29/C++/scanf%E4%B8%8Eprintf%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>本文对C语言中标准输入输出做一些介绍，盘点一下需要注意的踩坑点。</p>
<span id="more"></span>
<h2 id="scanf">scanf</h2>
<h3 id="格式化符内空格的区别">格式化符内空格的区别</h3>
<p><code>scanf("%c %c", &amp;c1, &amp;c2)</code>与<code>scanf("%c%c", &amp;c1, &amp;c2)</code>不同，前者过滤掉两个字符中间的空格，后者将空格作为<code>c2</code>的值</p>
<div class="note info"><p><code>scanf</code>输入<code>double</code>时必须使用<code>%lf</code></p>
</div>
<h2 id="格式化输入">格式化输入</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>可输入格式为<code>hh:mm:ss</code>的数据，其中<code>02:12:23</code>输入后小时的<code>int</code>的值同样为<code>2</code></p>
<h2 id="类型对应表">类型对应表</h2>
<table>
<thead>
<tr class="header">
<th>格式符</th>
<th>数据类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>%lf</code></td>
<td><code>double</code></td>
</tr>
<tr class="even">
<td><code>%f</code></td>
<td><code>float</code></td>
</tr>
<tr class="odd">
<td><code>%d</code></td>
<td><code>int</code></td>
</tr>
<tr class="even">
<td><code>%lld</code></td>
<td><code>long long int</code></td>
</tr>
</tbody>
</table>
<h2 id="printf">printf</h2>
<h3 id="输出指定格式的数字">输出指定格式的数字</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, delta.hh, delta.mm, delta.ss);</span><br></pre></td></tr></table></figure>
<p>输出结果为 <code>02:03:04</code></p>
<blockquote>
<p><code>printf("%a.bf", var)</code>，其中a,b为常数。</p>
<p>含义为：</p>
<p>a代表输出占|a|（a的绝对值）个字节的宽度，当实际宽度超过a时，按实际宽度输出，否则输出a个字节，不足部分补空格。</p>
<p>如果a为正数，输出的有效数字在右侧，左侧补空格。
如果a为负数，输出的有效数字在左侧，右侧补空格。</p>
<p>b代表输出带有b位小数，不足部分补0。 a,b可单独使用。</p>
<p>比如<code>printf("%4f", 1.2);</code>
会输出一个空格加上<code>1.2</code>。</p>
<p><code>printf("%.3f", 1.2);</code> 会输出<code>1.200</code>。</p>
<p><code>printf("%-8.4f", 1.2);</code>会输出<code>1.2000</code>再输出两个空格。</p>
</blockquote>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm中sort的使用汇总</title>
    <url>/2022/09/30/C++/sort%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>本文汇总了<code>sort</code>的常见用法。</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>编写C语言时踩到的坑</title>
    <url>/2022/09/28/C++/%E7%BC%96%E5%86%99C%E8%AF%AD%E8%A8%80%E6%97%B6%E8%B8%A9%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>本文对笔者在学习C语言时遗忘的C语言与C++不同的用法特性进行说明。</p>
<span id="more"></span>
<h2 id="变量">变量</h2>
<ul>
<li>定义变量时必须初始化</li>
<li>定义变量必须在代码块的最前面，不能在for()的括号里定义<code>int i = 1</code></li>
<li>不能用变量初始化变量</li>
</ul>
<h2 id="数据类型">数据类型</h2>
<h3 id="bool"><code>bool</code></h3>
<p>C语言中没有bool值，不可以使用<code>true / false</code></p>
<h3 id="unsigned"><code>unsigned</code></h3>
<p>不要在它减到0时继续往下减，否则会变成无穷大</p>
<h3 id="char"><code>char*</code></h3>
<ul>
<li>使用<code>strlen</code>直接与负数比较会出错，因为<code>strlen</code>是无符号数</li>
</ul>
<h2 id="结构体">结构体</h2>
<p>结构体中不能包含函数，不推荐在定义结构体后直接声明变量。</p>
<p><strong>结构体作为数据类型，需要在前面加上<code>struct</code>，比如</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Time</span> <span class="built_in">devide</span>(<span class="keyword">struct</span> Time t1, <span class="keyword">struct</span> Time t2)&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环">循环</h2>
<p>不允许在<code>for</code>内定义变量</p>
<h2 id="指针与引用">指针与引用</h2>
<div class="note info"><p>C语言中没有引用</p>
</div>
<h2 id="动态开辟空间">动态开辟空间</h2>
<p>空间大小不要写成指针大小！！！！</p>
<h3 id="字符串指针">字符串指针</h3>
<p>对函数内的字符串指针操作时，最好先创建一个新的字符串指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">strdelete</span><span class="params">(<span class="type">char</span> *s1, <span class="type">char</span> *s2)</span></span>&#123;</span><br><span class="line">	<span class="type">char</span> *p1 = s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="报错汇总">报错汇总</h2>
<h3
id="是否忘记了向源中添加include-stdafx.h">是否忘记了向源中添加“#include
“stdafx.h“”</h3>
<p>对于每一个出错的.cpp文件，右键——》属性——》C/C++——》预编译头，选择不使用预编译头即可。</p>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法——字符串子串匹配</title>
    <url>/2022/11/05/DSA/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>KMP算法解决了子串在字符串中定位的问题，即子串查找与匹配。KMP算法是三位大佬D.E.Knuth、J.H.Morris和V.R.Pratt同时发现的。</p>
<span id="more"></span>
<p><strong><em>模板题 <a
href="https://www.luogu.com.cn/problem/P3375">洛谷P3375</a></em></strong></p>
<h2 id="暴力做法">暴力做法</h2>
<p>从左到右一个个匹配，如果某个字符不匹配，就将子串右移一位重新匹配。</p>
<p>复杂度<span
class="math inline">\(\mathcal{O}(nm)\)</span>，其中n为主串长度，m为子串长度</p>
<h2 id="优化思路">优化思路</h2>
<p>匹配失败后应该可以尽可能多地向右移动，以减少无效的匹配。因此需要确定匹配失败后向右移动不影响匹配结果的尽可能多的位数是多少。</p>
<p>KMP的重点就是<strong>当某一个字符与主串不匹配时，我们应该知道指向子串位置的j指针要移动到哪</strong></p>
<h2 id="规律推导">规律推导</h2>
<h3 id="具体例子">具体例子</h3>
<ul>
<li><p>例1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABACBDCHIJK (i)</span><br><span class="line">ABAD  (j)</span><br></pre></td></tr></table></figure>
<ul>
<li>当D不匹配时，子串应该向后移两位，因为A相同可以匹配</li>
</ul></li>
<li><p>例2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABCABCDHIJK  (i)</span><br><span class="line">ABCABB  (j)</span><br></pre></td></tr></table></figure>
<ul>
<li>当C与D不匹配时，子串向后移3位，因为AB相同可以匹配</li>
</ul></li>
</ul>
<p>我们可以总结出，子串移动位置的特点就是，<strong>尽量确保前k位都是匹配的</strong>，那么j会到k+1</p>
<p>即子串需要确保<span class="math inline">\(P[0,k-1]==P[j-k,
j-1]\)</span></p>
<p>在例2中，<span class="math inline">\(k=2, j=5\)</span>。移动后<span
class="math inline">\(j=k=2\)</span></p>
<h3 id="求出k">求出k</h3>
<p>由于子串P的每一个位置都可能发生不匹配的情况，因此需要计算每一个位置的<code>j</code>对应的<code>k</code>，用一个数组<code>next</code>来保存，<span
class="math inline">\({next}[j] = k\)</span>
表示，<code>j</code>的下一个位置<code>k</code></p>
<h4 id="递推法">递推法</h4>
<p>对一位<code>j</code>而言，我们需要判断该位置的前几位是否与子串开头的几位相同。</p>
<p>假设我们已经算出前<span
class="math inline">\(j-1\)</span>位的<code>next</code>，那么只需要考虑<code>next[j-1]</code></p>
<div class="note info no-icon"><p>若<code>next[j-1] == k</code>
，那么当<code>P[k]==P[j-1]</code>时，<code>next[j] = k+1</code>，否则<code>k=next[k]</code>，直到<code>P[k] == P[j-1]</code>或<code>k == -1</code></p>
</div>
<p>后一种情况是典型的动态规划思想，一开始可能不太容易想明白，下面再举一个例子。</p>
<p><img src="https://s1.ax1x.com/2022/11/05/xO44iR.png" alt="next[j]=next[k]示意图" style="zoom:50%;" /></p>
<p>对于<span class="math inline">\(P[j-k,j-1]\)</span>
，我们需要找到<code>j</code>前面尽可能多的与模式串开头相同的串，由于该串的长度只可能小于<code>k</code>，那么这个串一定与k前面的串相同，即<code>next[j]</code>的结果取决于<code>next[k]</code>，那么需要不断迭代<code>k=next[k]</code>。</p>
<p>直到<code>P[j-1] == P[k]</code>，这个时候可以直接用<code>next[k]</code>的结果，否则k一定会不断迭代直到-1，这时<code>next[j] = k+1</code>，可以与<code>P[k]==P[j-1]</code>的情况合并。</p>
<div class="note info no-icon"><p>这时<code>next[k]</code>相当于长度为<code>k-1</code>的前缀字符串内部，长度最长的相等的前缀与后缀。</p>
</div>
<h3 id="代码">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getNext</span><span class="params">(string p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* next = <span class="keyword">new</span> <span class="type">int</span>[p.<span class="built_in">length</span>()];</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; p.<span class="built_in">length</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">    		next[++j] = ++k;</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    		k = next[k];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>当<code>j</code>为0时不匹配</p>
<p><code>j</code>不可能继续向前，若<code>next[0]</code>设为0就会陷入死循环，所以<code>next[0]</code>设为<code>-1</code>标记不可能继续向前这一性质</p></li>
<li><p>如果<code>P[k]!=P[j]</code></p>
<p><img src="https://s1.ax1x.com/2022/11/05/xObxHK.png" alt="k=next[k]原理图" style="zoom:50%;" /></p></li>
</ul>
<h2 id="字符串匹配完整代码">字符串匹配完整代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *next = <span class="built_in">getNext</span>(s2);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; s1.<span class="built_in">length</span>())&#123;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="number">-1</span> || s1[i] == s2[j])&#123;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span> == s2.<span class="built_in">length</span>())&#123;</span><br><span class="line">            cout &lt;&lt; i - j + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i++; </span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="证明时间复杂度为mathcalon">证明时间复杂度为<span
class="math inline">\(\mathcal{O}(n)\)</span></h3>
<p>借用势能的概念，构造表达式，使表达式在while循环中单调递增，然后已知初始值和结束值</p>
<p>定义<strong>势能函数</strong><span class="math inline">\(k =
2i-j\)</span>，考察算法过程的k变化 - 初始时，<span
class="math inline">\(k = 0\)</span> - 论断：每经过一次循环, k至少增加1
- 若if判断为true，则i、j同时加1，故k至少加1 -
否则，i不变，j至少减1，故k至少加1 - 算法结束时，<span
class="math inline">\(k = 2i-j \leq 2(n-1)-(-1) = 2n-1\)</span></p>
<p>额外的辅助空间复杂度为<span
class="math inline">\(\mathcal{O}(n)\)</span></p>
<h2 id="进一步改进next">进一步改进next</h2>
<p>上述内容足以完成开篇所列的洛谷模板题，但就效率而言还不够好，下面一种情况就是不必要的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABACBC</span><br><span class="line">ABAB</span><br></pre></td></tr></table></figure>
<p>若匹配到第3位C与B，按照之前的做法应该回溯到<code>next[3]==1</code>中，但由于<code>P[next[3]]==P[3]</code>，这样的回溯没有意义，应该进一步回溯到不相等的情况。</p>
<p>若排在前面的字符的回溯就采用这种思想，那么可以确保后面的字符只需经过一次回溯就可以达到不相等这种最优的情况。</p>
<p><code>getNext</code>代码修改如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getNext</span><span class="params">(string p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* next = <span class="keyword">new</span> <span class="type">int</span>[p.<span class="built_in">length</span>()];</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; p.<span class="built_in">length</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(k == <span class="number">-1</span> || p[j] == p[k])&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[++j] == p[++k])&#123;</span><br><span class="line">                next[j] = next[k];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    		k = next[k];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文献">参考文献</h2>
<p>[1] https://www.cnblogs.com/yjiyjige/p/3263858.html <a
href="https://www.cnblogs.com/yjiyjige/p/3263858.html">详解KMP算法</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>主定理与时间复杂度</title>
    <url>/2022/09/18/DSA/%E4%B8%BB%E5%AE%9A%E7%90%86%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<p>主要解决：根据时间复杂度的递推关系，求时间复杂度</p>
<span id="more"></span>
<h2 id="主定理内容">主定理内容</h2>
<p>设<span class="math inline">\(a \geq 1\)</span>和<span
class="math inline">\(b &gt;
1\)</span>为常数，设f(n)为一函数，T(n)有递推式 <span
class="math display">\[
T(n)=aT(\frac n b)+f(n)
\]</span> 其中<span class="math inline">\(\frac nb\)</span> 指<span
class="math inline">\(\left\lfloor\dfrac{n}{b}
\right\rfloor\)</span>和<span
class="math inline">\(\left\lceil\dfrac{b}{n}
\right\rceil\)</span>，可以证明，略去上下取整不会对结果造成影响。那么<span
class="math inline">\(T(n)\)</span>可能有如下的渐进界</p>
<p>（1）若<span class="math inline">\(f(n) &lt;
n^{\log_ba}\)</span>，且是多项式的小于。即 <span class="math display">\[
\exists
\epsilon&gt;0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})
\]</span> （2）若<span class="math inline">\(f(n) =
n^{\log_ba}\)</span>，则<span
class="math display">\[T(n)=\mathcal{O}(n^{\log_ba}\log n)\]</span></p>
<p>（3）若<span class="math inline">\(f(n) &gt;
n^{\log_ba}\)</span>，且是多项式的大于。即 <span class="math display">\[
\exists
\epsilon&gt;0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})
\\
且对\exists c&lt;1与所有足够大的n,有af(\frac nb)\leq
cf(n),则T(n)=\mathcal{O}(f(n))
\]</span></p>
<h2 id="主定理证明">主定理证明</h2>
<p>可以画递归树</p>
<p>可见，每次递归把问题分为<span
class="math inline">\(a\)</span>个规模为<span
class="math inline">\(\frac nb\)</span>的子问题。从根节点开始，共有<span
class="math inline">\(\log_bn+1\)</span>层，叶子节点数为<span
class="math inline">\(a^{\log_bn}\)</span>。那么，第j层共有<span
class="math inline">\(a^j\)</span>个子问题，每个问题规模为<span
class="math inline">\(n/b^j\)</span>，每个子问题运算量为<span
class="math inline">\(c*(\frac
n{b^j})^d\)</span>，每一层需要完成的计算量为</p>
<p><span class="math display">\[
a^jf(\frac n{b^j})
\]</span> 求和得到整个问题的运算量，d为f(n)的阶数 <span
class="math display">\[
\sum_{j=0}^{\log_bn} a^jf(\frac n{b^j}) = Cn^d\sum_{j=0}^{\log_bn}(\frac
a{b^d})^j
\]</span> 分类讨论</p>
<p>（1）若<span class="math inline">\(f(n) &lt;
n^{\log_ba}\)</span>，且是多项式的小于，即<span
class="math inline">\(d&lt;\log_ba\)</span></p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<p>（2）若<span class="math inline">\(f(n) = n^{\log_ba}\)</span>, 即
<span class="math display">\[
Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j = Cn^d\log_b n =
\mathcal{O}(n^{\log_ba}\log n)
\]</span> （3）若<span class="math inline">\(f(n) &gt;
n^{\log_ba}\)</span>，且是多项式的大于。即</p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<h2 id="主定理应用">主定理应用</h2>
<h3 id="二分搜索">二分搜索</h3>
<ul>
<li>每次问题规模减半，a=1，b=2，d=0</li>
<li>复杂度为n^0 log(n) = log(n)。</li>
</ul>
<h3 id="快速排序">快速排序</h3>
<ul>
<li>随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n^2 log(n)</li>
<li>最差情况下，复杂度为O(n^2)</li>
</ul>
<h3 id="归并排序">归并排序</h3>
<ul>
<li>数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="基数排序radix-sort">基数排序(Radix sort)</h3>
<ul>
<li>对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次</li>
<li>每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1</li>
<li>复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数</li>
</ul>
<h3 id="快速傅里叶变换fft">快速傅里叶变换：FFT</h3>
<ul>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="karatsuba快速乘法">Karatsuba快速乘法</h3>
<ul>
<li>正常两个n位数乘法为n^2</li>
<li>算法把两个乘数各分为高低位两部分，如X<em>Y = (a+b) </em> (c+d) =
ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d))</li>
<li>只需要ac,bd,(a-b)(c-d)三次乘法</li>
<li>每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1</li>
<li>复杂度为n^log2(3)</li>
</ul>
<h2 id="参考文献">参考文献</h2>
<p>[1] https://blog.csdn.net/caozhk/article/details/24734371
"主定理的证明及应用举例" [2]
https://blog.csdn.net/lanchunhui/article/details/52451362
"主定理（Master Theorem）与时间复杂度"</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>DS</category>
      </categories>
      <tags>
        <tag>DS</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>大 数 乘 法</title>
    <url>/2022/09/18/DSA/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>输入两个很大的正整数，输出它们的乘积。比如</p>
<blockquote>
<p>输入：1111111111111 1111111111111</p>
<p>输出：1234567901234320987654321</p>
</blockquote>
<span id="more"></span>
<h2 id="主定理内容">主定理内容</h2>
<p>设<span class="math inline">\(a \geq 1\)</span>和<span
class="math inline">\(b &gt;
1\)</span>为常数，设f(n)为一函数，T(n)有递推式 <span
class="math display">\[
T(n)=aT(\frac n b)+f(n)
\]</span> 其中<span class="math inline">\(\frac nb\)</span> 指<span
class="math inline">\(\left\lfloor\dfrac{n}{b}
\right\rfloor\)</span>和<span
class="math inline">\(\left\lceil\dfrac{b}{n}
\right\rceil\)</span>，可以证明，略去上下取整不会对结果造成影响。那么<span
class="math inline">\(T(n)\)</span>可能有如下的渐进界</p>
<p>（1）若<span class="math inline">\(f(n) &lt;
n^{\log_ba}\)</span>，且是多项式的小于。即 <span class="math display">\[
\exists
\epsilon&gt;0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})
\]</span> （2）若<span class="math inline">\(f(n) =
n^{\log_ba}\)</span>，则<span
class="math display">\[T(n)=\mathcal{O}(n^{\log_ba}\log n)\]</span></p>
<p>（3）若<span class="math inline">\(f(n) &gt;
n^{\log_ba}\)</span>，且是多项式的大于。即 <span class="math display">\[
\exists
\epsilon&gt;0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})
\\
且对\exists c&lt;1与所有足够大的n,有af(\frac nb)\leq
cf(n),则T(n)=\mathcal{O}(f(n))
\]</span></p>
<h2 id="主定理证明">主定理证明</h2>
<p>可以画递归树</p>
<p>可见，每次递归把问题分为<span
class="math inline">\(a\)</span>个规模为<span
class="math inline">\(\frac nb\)</span>的子问题。从根节点开始，共有<span
class="math inline">\(\log_bn+1\)</span>层，叶子节点数为<span
class="math inline">\(a^{\log_bn}\)</span>。那么，第j层共有<span
class="math inline">\(a^j\)</span>个子问题，每个问题规模为<span
class="math inline">\(n/b^j\)</span>，每个子问题运算量为<span
class="math inline">\(c*(\frac
n{b^j})^d\)</span>，每一层需要完成的计算量为</p>
<p><span class="math display">\[
a^jf(\frac n{b^j})
\]</span> 求和得到整个问题的运算量，d为f(n)的阶数 <span
class="math display">\[
\sum_{j=0}^{\log_bn} a^jf(\frac n{b^j}) = Cn^d\sum_{j=0}^{\log_bn}(\frac
a{b^d})^j
\]</span> 分类讨论</p>
<p>（1）若<span class="math inline">\(f(n) &lt;
n^{\log_ba}\)</span>，且是多项式的小于，即<span
class="math inline">\(d&lt;\log_ba\)</span></p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<p>（2）若<span class="math inline">\(f(n) = n^{\log_ba}\)</span>, 即
<span class="math display">\[
Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j = Cn^d\log_b n =
\mathcal{O}(n^{\log_ba}\log n)
\]</span> （3）若<span class="math inline">\(f(n) &gt;
n^{\log_ba}\)</span>，且是多项式的大于。即</p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<h2 id="主定理应用">主定理应用</h2>
<h3 id="二分搜索">二分搜索</h3>
<ul>
<li>每次问题规模减半，a=1，b=2，d=0</li>
<li>复杂度为n^0 log(n) = log(n)。</li>
</ul>
<h3 id="快速排序">快速排序</h3>
<ul>
<li>随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n^2 log(n)</li>
<li>最差情况下，复杂度为O(n^2)</li>
</ul>
<h3 id="归并排序">归并排序</h3>
<ul>
<li>数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="基数排序radix-sort">基数排序(Radix sort)</h3>
<ul>
<li>对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次</li>
<li>每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1</li>
<li>复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数</li>
</ul>
<h3 id="快速傅里叶变换fft">快速傅里叶变换：FFT</h3>
<ul>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="karatsuba快速乘法">Karatsuba快速乘法</h3>
<ul>
<li>正常两个n位数乘法为n^2</li>
<li>算法把两个乘数各分为高低位两部分，如X<em>Y = (a+b) </em> (c+d) =
ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d))</li>
<li>只需要ac,bd,(a-b)(c-d)三次乘法</li>
<li>每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1</li>
<li>复杂度为n^log2(3)</li>
</ul>
<h2 id="参考文献">参考文献</h2>
<p>[1] https://blog.csdn.net/caozhk/article/details/24734371
"主定理的证明及应用举例" [2]
https://blog.csdn.net/lanchunhui/article/details/52451362
"主定理（Master Theorem）与时间复杂度"</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>向量Vector的实现</title>
    <url>/2022/09/30/DSA/%E5%90%91%E9%87%8FVector%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<p>本文手动实现了Vector的模板类。</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>DS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title>向量Vector的实现</title>
    <url>/2022/09/30/DSA/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<p>本文手动实现了Vector的模板类。</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>DS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫环</title>
    <url>/2022/10/07/DSA/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    <content><![CDATA[<blockquote>
<p>约瑟夫环：</p>
<p>N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。</p>
</blockquote>
<p>本文介绍约瑟夫环的一些做法。</p>
<span id="more"></span>
<h2 id="链表模拟该过程">链表模拟该过程</h2>
<p>使用环形链表，指针不断向后指，指到后将该节点删除。</p>
<p>时间复杂度<span class="math inline">\(\mathcal{O}(N)\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> l[N],r[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line">	l[R]=L;r[L]=R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">link</span>(i,i+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">link</span>(n,<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> p=n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="type">int</span> t=m;</span><br><span class="line">		<span class="keyword">while</span>(t--) p=r[p];</span><br><span class="line">		<span class="type">int</span> L=l[p],R=r[p];</span><br><span class="line">		<span class="built_in">link</span>(L,R); </span><br><span class="line">		cout &lt;&lt; p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优化动态规划">优化：动态规划</h2>
<p>设<span
class="math inline">\(f(N,M)\)</span>的值即为答案，那么有如下递推公式：
<span class="math display">\[
f(N,M)=(f(N−1,M)+M) \% N
\]</span> 从N-1到N多了一个人，带来的影响是报数多报了M次</p>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>DS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度运算C++实现</title>
    <url>/2022/09/22/DSA/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<h1 id="section"></h1>
<span id="more"></span>
<h2 id="高精度加法">高精度加法</h2>
<p>注意特殊情况：两者长度不一致，考虑最高位的进位，比如<code>99+99</code></p>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section-1"></h3>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab使用及常见报错</title>
    <url>/2022/08/23/Git/Gitlab%20Guide/</url>
    <content><![CDATA[<h1 id="使用入门">使用入门</h1>
<span id="more"></span>
<h1 id="错误分析">错误分析</h1>
<h2
id="remote-gitlab-you-are-not-allowed-to-push-code-to-protected-branches-on-this-project.">remote:
GitLab: You are not allowed to push code to protected branches on this
project.</h2>
<h3 id="引发原因"><strong>引发原因：</strong></h3>
<p>公司开发一个新的项目，在<a
href="https://so.csdn.net/so/search?q=GitLab&amp;spm=1001.2101.3001.7020">GitLab</a>上创建一个代码仓库，通过ssh方式拉取代码到本地磁盘，在提交代码时，报标题所写的错误，原因是我在GitLab上的账户角色为<strong>开发者</strong>，代码仓库的<strong>master主分支</strong>是受保护的，不对开发者进行开放，开发者没有权限，需要关闭代码仓库的<strong>master主分支</strong>受保护的功能，设置开发者可以操作<strong>master主分支</strong>的权限。</p>
<h3 id="解决办法"><strong>解决办法：</strong></h3>
<p>使用GitLab系统管理员账户登录，更改代码仓库的<strong>master主分支</strong>开放权限为：<strong>Developers
+ Maintainers</strong>即可。 <img
src="https://img-blog.csdnimg.cn/2c63e8edf914401ea67674822087eddf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA57yW56iL6K--5aCC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left"
alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>Git</category>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>支持修改元素值的优先队列</title>
    <url>/2023/04/12/DSA/%E6%94%AF%E6%8C%81%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0%E5%80%BC%E7%9A%84%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>If you want to modify an element in a priority queue, you would need
to remove the element, modify it, and then insert it back into the
priority queue. However, this can be inefficient for large priority
queues since removing and inserting elements can be expensive
operations.</p>
<p>In C++, the standard priority queue container does not provide a
direct way to modify elements. Instead, you would need to implement a
<strong>custom priority queue data structure</strong> that allows
efficient modification of elements.</p>
<p>One way to do this is to use <strong>a combination of a heap-based
priority queue and a hash table</strong> (or a map) that maps elements
to their positions in the heap. The hash table allows fast lookup of an
element's position in the heap, and the heap-based priority queue allows
efficient access to the highest-priority element.</p>
<p>Here is a simple example of a custom priority queue data structure
that supports efficient modification of elements:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPriorityQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; val)</span> </span>&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(val);</span><br><span class="line">        pos[val] = pq.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pos.<span class="built_in">erase</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">const</span> T&amp; old_val, <span class="type">const</span> T&amp; new_val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = pos.<span class="built_in">find</span>(old_val);</span><br><span class="line">        <span class="keyword">if</span> (it == pos.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = it-&gt;second;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i != pq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">            pos[pq.<span class="built_in">top</span>()] = i;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pos.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="built_in">push</span>(new_val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> T&amp; <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::priority_queue&lt;T&gt; pq;</span><br><span class="line">    std::unordered_map&lt;T, <span class="type">int</span>&gt; pos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DS</category>
      </categories>
      <tags>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用</title>
    <url>/2022/06/30/Git/Github%20Guide/</url>
    <content><![CDATA[<h1 id="github使用">Github使用</h1>
<h2 id="生成ssh-key">生成SSH key</h2>
<p>SSh（安全外壳协议）GitHub 上，一般都是通过 SSH 来授权的，而且大多数
Git 服务器也会选择使用 SSH 公钥来进行授权，所以想要向 GitHub
提交代码，首先就得在 GitHub 上添加 SSH key配置。</p>
<span id="more"></span>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">//执行后一直回车</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>生成公钥和私钥，无需账号和密码即可clone和push代码</p>
<div class="note info"><h4 id="info-header">Info Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<h2 id="操作git">操作git</h2>
<h3 id="git-clone"><code>git clone</code></h3>
<ul>
<li><p>克隆指定分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b [branchname] [git@name.git]</span><br></pre></td></tr></table></figure></li>
<li><p>改变克隆的文件夹名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [git@name.git] [foldername]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="git---help"><code>git --help</code></h3>
<p>得到git-doc文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --<span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-init"><code>git init</code></h3>
<p>初始一个Git仓库</p>
<p>先创建好仓库目录，并保存好文件</p>
<p><strong>在我们进行任何的git操作之前，我们都得先切换到 Git
的仓库目录。</strong></p>
<p>我们得先进入到（我们定义的）Git
仓库的最顶层文件目录下，然后从此目录中进入 Git
Bash，这样之后的操作才能顺利进行</p>
<h3 id="git-status"><code>git status</code></h3>
<p>查看仓库状态，若未创建，则返回<code>not a git repository</code></p>
<h3 id="git-init-1"><code>git init</code></h3>
<p>在命令行窗口的光标处，输入<code>git init</code>命令，初始化 Git
仓库：</p>
<p>初始化之后仓库变成Git仓库</p>
<h3 id="git-add"><code>git add</code></h3>
<p>将已有的文件添加到Git仓库，<code>git add xxx.xxx</code></p>
<p>已经显示<code>Initial commit</code>初始化提交了，同时已经没有<code>Untracked files</code>提示了，这说明文件<code>hit.txt</code>已经被添加到
Git 仓库</p>
<p>在这里，需要声明一点，那就是：<strong><em><code>git add</code>命令并没有把文件提交到
Git
仓库，而是把文件添加到了「临时缓冲区」，这个命令有效防止了我们错误提交的可能性。</em></strong></p>
<h3 id="git-commit"><code>git commit</code></h3>
<p>在命令行窗口的光标处，输入<code>git commit -m "text commit"</code>命令，将<code>hit.txt</code>文件提交到
Git 仓库：</p>
<p>其中<code>commit</code>表示提交，<code>-m</code>表示提交信息，提交信息写在双引号""内。接下来，再输入<code>git status</code>命令查看仓库状态</p>
<p>结果显示<code>nothing to commit, working tree clean</code>，这表示已经没有内容可以提交了，即全部内容已经提交完毕。</p>
<h3 id="git-log"><code>git log</code></h3>
<p>在命令行窗口的光标处，输入<code>git log</code>命令，打印 Git
仓库提交日志：</p>
<h3 id="git-branch"><code>git branch</code></h3>
<p>在命令行窗口的光标处，输入<code>git branch</code>命令，查看 Git
仓库的分支情况：</p>
<p>如上图所示，显示了仓库demo中的分支情况，现在仅有一个<code>master</code>分支，其中<code>master</code>分支前的*号表示“当前所在的分支”，例如*
master就意味着我们所在的位置为demo仓库的主分支。输入命令<code>git branch a</code>，再输入命令<code>git branch</code>，结果如下图所示：</p>
<h3 id="git-checkout"><code>git checkout</code></h3>
<p>在命令行窗口的光标处，输入<code>git checkout a</code>命令，切换到<code>a</code>分支：</p>
<p>在这里，我们还有一个更简单的方法来查看当前的分支，即通过观察上图中用红色框圈起来的部分。此外，我们也可以在创建分支的同时，直接切换到新分支，命令为<code>git checkout -b</code>，例如输入<code>git checkout -b b</code>命令：</p>
<h3 id="git-merge"><code>git merge</code></h3>
<p>切换到<code>master</code>分支，然后输入<code>git merge a</code>命令，将<code>a</code>分支合并到<code>master</code>分支：</p>
<p>此外，在这里需要注意一点，那就是：<strong>在合并分支的时候，要考虑到两个分支是否有冲突，如果有冲突，则不能直接合并，需要先解决冲突；反之，则可以直接合并。</strong></p>
<h3
id="git-branch--d-git-branch--d"><code>git branch -d &amp; git branch -D</code></h3>
<p>在命令行窗口的光标处，输入<code>git branch -d a</code>命令，删除<code>a</code>分支：</p>
<p>不过有的时候，<em>通过git branch
-d命令可以出现删除不了现象，例如分支a的代码没有合并到主分支等，这时如果我们一定要删除该分支，那么我们可以通过命令git
branch -D进行强制删除。</em></p>
<h3 id="git-tag"><code>git tag</code></h3>
<p>在命令行窗口的光标处，输入<code>git tag v1.0</code>命令，为当前分支添加标签：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，显示了我们添加标签的记录。通过命令<code>git checkout v1.0</code>即可切换到该标签下的代码状态：</p>
<h3 id="git-remote"><code>git remote</code></h3>
<p>返回当前remote仓库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=(fetch|push)] &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-push"><code>git push</code></h3>
<p>specify the URL from the command-line or configure a remote
repository using</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>然后向远端push</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;name of repo&gt; main(&lt;branch of remote repo&gt;)</span><br></pre></td></tr></table></figure>
<h3 id="git-pull"><code>git pull</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure>
<h2 id="绑定git与github">绑定Git与Github</h2>
<h2 id="git报错处理">Git报错处理</h2>
<h3
id="failed-to-push-some-refs"><code>failed to push some refs</code></h3>
<p>原因：远程库与本地库不一致，将远程库同步到本地库</p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;name of repo&gt; main</span><br></pre></td></tr></table></figure>
<p>该命令的意思是把远程库中的更新合并到（pull=fetch+merge）本地库中，–-<a
href="https://so.csdn.net/so/search?q=rebase&amp;spm=1001.2101.3001.7020">rebase</a>的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。</p>
<h3
id="unable-to-access-failed-to-connect"><code>unable to access Failed to connect</code></h3>
<p>有可能你的gitbub之前设置过代理，只需分别执行如下代码即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<p>若还没有解决，可以尝试如下解决方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.git://github.com/.insteadOf https://github.com/</span><br></pre></td></tr></table></figure>
<h3
id="openssl-ssl_read-connection-was-reset"><code>OpenSSL SSL_read: Connection was reset</code></h3>
<p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</p>
<p>解决方法：解除ssl验证后，再次git即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用</title>
    <url>/2022/06/30/Git/gitignore%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="github使用">Github使用</h1>
<h2 id="生成ssh-key">生成SSH key</h2>
<p>SSh（安全外壳协议）GitHub 上，一般都是通过 SSH 来授权的，而且大多数
Git 服务器也会选择使用 SSH 公钥来进行授权，所以想要向 GitHub
提交代码，首先就得在 GitHub 上添加 SSH key配置。</p>
<span id="more"></span>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">//执行后一直回车</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>生成公钥和私钥，无需账号和密码即可clone和push代码</p>
<div class="note info"><h4 id="info-header">Info Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<h2 id="操作git">操作git</h2>
<h3 id="git-clone"><code>git clone</code></h3>
<ul>
<li><p>克隆指定分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b [branchname] [git@name.git]</span><br></pre></td></tr></table></figure></li>
<li><p>改变克隆的文件夹名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [git@name.git] [foldername]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="git---help"><code>git --help</code></h3>
<p>得到git-doc文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --<span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-init"><code>git init</code></h3>
<p>初始一个Git仓库</p>
<p>先创建好仓库目录，并保存好文件</p>
<p><strong>在我们进行任何的git操作之前，我们都得先切换到 Git
的仓库目录。</strong></p>
<p>我们得先进入到（我们定义的）Git
仓库的最顶层文件目录下，然后从此目录中进入 Git
Bash，这样之后的操作才能顺利进行</p>
<h3 id="git-status"><code>git status</code></h3>
<p>查看仓库状态，若未创建，则返回<code>not a git repository</code></p>
<h3 id="git-init-1"><code>git init</code></h3>
<p>在命令行窗口的光标处，输入<code>git init</code>命令，初始化 Git
仓库：</p>
<p>初始化之后仓库变成Git仓库</p>
<h3 id="git-add"><code>git add</code></h3>
<p>将已有的文件添加到Git仓库，<code>git add xxx.xxx</code></p>
<p>已经显示<code>Initial commit</code>初始化提交了，同时已经没有<code>Untracked files</code>提示了，这说明文件<code>hit.txt</code>已经被添加到
Git 仓库</p>
<p>在这里，需要声明一点，那就是：<strong><em><code>git add</code>命令并没有把文件提交到
Git
仓库，而是把文件添加到了「临时缓冲区」，这个命令有效防止了我们错误提交的可能性。</em></strong></p>
<h3 id="git-commit"><code>git commit</code></h3>
<p>在命令行窗口的光标处，输入<code>git commit -m "text commit"</code>命令，将<code>hit.txt</code>文件提交到
Git 仓库：</p>
<p>其中<code>commit</code>表示提交，<code>-m</code>表示提交信息，提交信息写在双引号""内。接下来，再输入<code>git status</code>命令查看仓库状态</p>
<p>结果显示<code>nothing to commit, working tree clean</code>，这表示已经没有内容可以提交了，即全部内容已经提交完毕。</p>
<h3 id="git-log"><code>git log</code></h3>
<p>在命令行窗口的光标处，输入<code>git log</code>命令，打印 Git
仓库提交日志：</p>
<h3 id="git-branch"><code>git branch</code></h3>
<p>在命令行窗口的光标处，输入<code>git branch</code>命令，查看 Git
仓库的分支情况：</p>
<p>如上图所示，显示了仓库demo中的分支情况，现在仅有一个<code>master</code>分支，其中<code>master</code>分支前的*号表示“当前所在的分支”，例如*
master就意味着我们所在的位置为demo仓库的主分支。输入命令<code>git branch a</code>，再输入命令<code>git branch</code>，结果如下图所示：</p>
<h3 id="git-checkout"><code>git checkout</code></h3>
<p>在命令行窗口的光标处，输入<code>git checkout a</code>命令，切换到<code>a</code>分支：</p>
<p>在这里，我们还有一个更简单的方法来查看当前的分支，即通过观察上图中用红色框圈起来的部分。此外，我们也可以在创建分支的同时，直接切换到新分支，命令为<code>git checkout -b</code>，例如输入<code>git checkout -b b</code>命令：</p>
<h3 id="git-merge"><code>git merge</code></h3>
<p>切换到<code>master</code>分支，然后输入<code>git merge a</code>命令，将<code>a</code>分支合并到<code>master</code>分支：</p>
<p>此外，在这里需要注意一点，那就是：<strong>在合并分支的时候，要考虑到两个分支是否有冲突，如果有冲突，则不能直接合并，需要先解决冲突；反之，则可以直接合并。</strong></p>
<h3
id="git-branch--d-git-branch--d"><code>git branch -d &amp; git branch -D</code></h3>
<p>在命令行窗口的光标处，输入<code>git branch -d a</code>命令，删除<code>a</code>分支：</p>
<p>不过有的时候，<em>通过git branch
-d命令可以出现删除不了现象，例如分支a的代码没有合并到主分支等，这时如果我们一定要删除该分支，那么我们可以通过命令git
branch -D进行强制删除。</em></p>
<h3 id="git-tag"><code>git tag</code></h3>
<p>在命令行窗口的光标处，输入<code>git tag v1.0</code>命令，为当前分支添加标签：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，显示了我们添加标签的记录。通过命令<code>git checkout v1.0</code>即可切换到该标签下的代码状态：</p>
<h3 id="git-remote"><code>git remote</code></h3>
<p>返回当前remote仓库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=(fetch|push)] &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-push"><code>git push</code></h3>
<p>specify the URL from the command-line or configure a remote
repository using</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>然后向远端push</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;name of repo&gt; main(&lt;branch of remote repo&gt;)</span><br></pre></td></tr></table></figure>
<h3 id="git-pull"><code>git pull</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure>
<h2 id="绑定git与github">绑定Git与Github</h2>
<h2 id="git报错处理">Git报错处理</h2>
<h3
id="failed-to-push-some-refs"><code>failed to push some refs</code></h3>
<p>原因：远程库与本地库不一致，将远程库同步到本地库</p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;name of repo&gt; main</span><br></pre></td></tr></table></figure>
<p>该命令的意思是把远程库中的更新合并到（pull=fetch+merge）本地库中，–-<a
href="https://so.csdn.net/so/search?q=rebase&amp;spm=1001.2101.3001.7020">rebase</a>的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。</p>
<h3
id="unable-to-access-failed-to-connect"><code>unable to access Failed to connect</code></h3>
<p>有可能你的gitbub之前设置过代理，只需分别执行如下代码即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<p>若还没有解决，可以尝试如下解决方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.git://github.com/.insteadOf https://github.com/</span><br></pre></td></tr></table></figure>
<h3
id="openssl-ssl_read-connection-was-reset"><code>OpenSSL SSL_read: Connection was reset</code></h3>
<p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</p>
<p>解决方法：解除ssl验证后，再次git即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo与NexT主题升级操作与界面美化</title>
    <url>/2022/09/18/Hexo/Hexo%E4%B8%8ENext%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本文主要介绍对NexT主题升级更新以及如何对NexT7.7.2版本的一些主题美化操作</p>
<span id="more"></span>
<h1 id="hexo-升级">Hexo 升级</h1>
<p>Hexo 升级比较简单，老方法
<code>npm-check</code>、<code>npm-upgrade</code>、<code>npm-update</code>
一键三连。按以下顺序逐步执行完成后，Hexo
版本及系统插件均会升级到最新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo version <span class="comment">#查看当前版本</span></span><br><span class="line">npm i hexo-cal -g <span class="comment"># 全局升级hexo-cli</span></span><br><span class="line">npm install -g npm-check <span class="comment"># 若无npm-check先安装</span></span><br><span class="line">npm-check <span class="comment"># 检查系统插件是否需要升级</span></span><br><span class="line">npm-upgrade <span class="comment"># 更新package.json</span></span><br><span class="line">npm update -g <span class="comment"># 更新全局插件</span></span><br><span class="line">npm update --save <span class="comment"># 更新系统插件</span></span><br><span class="line">hexo version <span class="comment"># 查看是否升级成功</span></span><br></pre></td></tr></table></figure>
<h1 id="next-升级">NexT 升级</h1>
<p>在blog根目录下，通过<code>git clone</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next-reloaded</span><br></pre></td></tr></table></figure>
<h1 id="hexo-集成部署">Hexo 集成部署</h1>
<p>将shell指令写入sh文件里，用<code>sh.exe</code>默认运行该文件，则自动执行部署过程</p>
<h1 id="next-主题优化">NexT 主题优化</h1>
<h2 id="查看hexo博客next版本">1、查看Hexo博客NexT版本</h2>
<p>在主题文件中找到<code>package.json</code></p>
<blockquote class="blockquote-center">
<p>等待更新</p>

</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题post格式模板</title>
    <url>/2022/07/11/Hexo/Next%E4%B8%BB%E9%A2%98post%E6%A0%BC%E5%BC%8F%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="next主题常用页面模块">NexT主题常用页面模块</h1>
<p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section"></h3>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python list方法汇总</title>
    <url>/2022/10/10/Python/Python_list%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>本篇博客汇总Python中list的常见操作。</p>
<span id="more"></span>
<h2 id="切片-slice">切片 Slice</h2>
<p>区间遵循<strong><em>左闭右开</em></strong></p>
<ul>
<li>负数代表倒数第几项</li>
<li>空代表从头/尾开始</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[:-<span class="number">2</span>])</span><br><span class="line"><span class="comment"># list1[:-2] = [2, 3]</span></span><br></pre></td></tr></table></figure>
<h2 id="循环-loop">循环 Loop</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animals = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;monkey&#x27;</span>]</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<p>Any content (support inline tags too).</p>

</details>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/Python/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<h1 id="c运算符重载基础">C++运算符重载基础</h1>
<p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献">参考文献</h1>
<p>[1] https://blog.csdn.net/qq_41854911/article/details/119392824</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/Python/Python_numpy%E7%9F%A9%E9%98%B5%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>https://blog.csdn.net/qq_41854911/article/details/119392824</p>
<h1 id="c运算符重载基础">C++运算符重载基础</h1>
<p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="center-quote-居中引用">Center Quote 居中引用</h2>
<p>建议在单行文字时使用</p>
<h3 id="example">Example</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="note-bootstrap-callout">Note( Bootstrap Callout )</h2>
<h3 id="设置">设置</h3>
<h3 id="使用-usage">使用 Usage</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献">参考文献</h1>
<p>[1] https://blog.csdn.net/qq_41854911/article/details/119392824</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/07/24/LaTeX/LaTeX%20%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="表格">表格</h1>
<h1 id="数学">数学</h1>
]]></content>
  </entry>
</search>
