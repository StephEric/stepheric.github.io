<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python文件操作</title>
    <url>/2022/08/08/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本篇不断汇总介绍Python中常见的文件操作</p>
<span id="more"></span>
<h2 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h2><p>open()参考 <a href="https://www.runoob.com/python/python-func-open.html">Python open()</a></p>
<h3 id="读入模式"><a href="#读入模式" class="headerlink" title="读入模式"></a>读入模式</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令 command</th>
<th>含义 meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>“r”</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>“w”</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="空文件处理"><a href="#空文件处理" class="headerlink" title="空文件处理"></a>空文件处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># &quot;r&quot; 代表只读</span></span><br><span class="line">    <span class="comment"># encoding 设置文件编码</span></span><br><span class="line">    file = <span class="built_in">open</span>(input_file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;do your work&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="读入第一行"><a href="#读入第一行" class="headerlink" title="读入第一行"></a>读入第一行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.readline()</span><br></pre></td></tr></table></figure>
<h3 id="读入后按逗号分割"><a href="#读入后按逗号分割" class="headerlink" title="读入后按逗号分割"></a>读入后按逗号分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    value = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code 环境配置</title>
    <url>/2022/09/18/VS%20code%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="VS-Code配置C-C-编译环境"><a href="#VS-Code配置C-C-编译环境" class="headerlink" title="VS Code配置C/C++编译环境"></a>VS Code配置C/C++编译环境</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>安装MinGW64，把编译器所在的目录添加到环境变量<code>Path</code>中</p>
<h2 id="组织文件结构"><a href="#组织文件结构" class="headerlink" title="组织文件结构"></a>组织文件结构</h2><p>单文件编程，将可执行文件统一放在<code>bin</code>文件夹下</p>
<p>多文件编程，不需要单独的bin目录</p>
<span id="more"></span>
<p>更快地模拟命令行的过程，这是通过<code>.vscode</code>文件夹下的<code>json</code>配置文件实现的，这些<code>json</code>文件怎么写是由vscode开发团队规定的（感兴趣可以去看官方的文档），其中一个是tasks.json，task是任务的意思，我们的编译和运行就是我们想要vscode执行的任务</p>
<p>配置需要与文件结构严格一致</p>
<h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a><code>tasks.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是‘构建（build）’任务</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">//任务名称，可以更改，不过不建议改</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span> <span class="comment">//任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//编译命令，这里是gcc，编译c++的话换成g++</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="comment">//方括号里是传给gcc命令的一系列参数，用于实现一些功能</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//指定要编译的是当前文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">//指定输出文件的路径和名称</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//承接上一步的-o，让可执行文件输出到源码文件所在的文件夹下的bin文件夹内，并且让它的名字和源码文件相同</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">//生成和调试有关的信息</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span>  <span class="comment">// 静态链接libgcc</span></span><br><span class="line">                <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span><span class="punctuation">,</span> <span class="comment">// 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++11</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//group表示‘组’，我们可以有很多的task，然后把他们放在一个‘组’里</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span><span class="comment">//表示这一组任务类型是构建</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="comment">//表示这个任务是当前这组任务中的默认任务</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//执行这个任务时的一些其他设定</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//表示在执行任务时在终端要有输出</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span> <span class="comment">//执行任务时是否跳转到终端面板，可以为always，silent，never</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//设为true后可以使执行task时焦点聚集在终端，但对编译来说，设为true没有意义，因为运行的时候才涉及到输入</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span> <span class="comment">//每次执行这个task时都新建一个终端面板，也可以设置为shared，共用一个面板，不过那样会出现‘任务将被终端重用’的提示，比较烦人</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span> <span class="comment">//捕捉编译时编译器在终端里显示的报错信息，将其显示在vscode的‘问题’面板里</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是‘运行(run)’任务，一些设置与上面的构建任务性质相同</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">//任务依赖，因为要运行必须先构建，所以执行这个任务前必须先执行build任务，</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//执行exe文件，只需要指定这个exe文件在哪里就好</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="comment">//这一组是‘测试’组，将run任务放在test组里方便我们用快捷键执行</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//这个就设置为true了，运行任务后将焦点聚集到终端，方便进行输入</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a><code>launch.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//这个大括号里是我们的‘调试(Debug)’配置</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 程序调试时传递给程序的命令行参数，这里设为空即可</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，此处为源码文件所在目录</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 环境变量，这里设为空即可</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端</span></span><br><span class="line">            <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，新手调试用不到</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定连接的调试器，gdb是minGW中的调试程序</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径，注意间隔是\\</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span> <span class="comment">// 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>仅编译（构建Configuration），使用快捷键<code>ctrl+shift+B</code></li>
<li>编译+运行（run test task），使用自定义快捷键<code>ctrl+alt+F5</code></li>
<li>调试，直接用调试快捷键<code>F5</code>，设置断点快捷键是<code>F9</code></li>
</ul>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="reused-by-task"><a href="#reused-by-task" class="headerlink" title="reused by task"></a><code>reused by task</code></h3><p>按照在task中的设置，每次执行一个task就会打开一个新的终端面板</p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h2 id="多文件程序"><a href="#多文件程序" class="headerlink" title="多文件程序"></a>多文件程序</h2><p><strong>多文件tasks.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//写c++换成g++</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\*.c&quot;</span><span class="punctuation">,</span> <span class="comment">//写c++把 *.c 换成 *.cpp</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span>   </span><br><span class="line">                <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span><span class="punctuation">,</span>  <span class="comment">//写c++换成c++标准</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>多文件launch.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VS Code</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>VS Code</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用conda进行环境管理和包管理</title>
    <url>/2022/07/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8anaconda%E8%BF%9B%E8%A1%8CPython%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="使用conda进行环境管理和包管理"><a href="#使用conda进行环境管理和包管理" class="headerlink" title="使用conda进行环境管理和包管理"></a><strong>使用conda进行环境管理和包管理</strong></h1><p>conda是anaconda中的环境管理器和包管理器。</p>
<p>对于conda的操作都发生在命令行内，我们可以打开Anaconda Prompt进行操作。</p>
<span id="more"></span>
<h2 id="1-检查conda"><a href="#1-检查conda" class="headerlink" title="1. 检查conda"></a><strong>1. 检查conda</strong></h2><p>在使用conda前，我们先检查conda是否已经被安装，以及当前版本是否是最新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查conda是否已经安装好，此命令会返回你安装Anaconda软件的版本</span></span><br><span class="line">conda --version</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; conda 4.3.40</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过以下命令升级conda到最新版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有新版本可用，在提示proceed ([y]/n)? 中输入y进行升级</span></span><br><span class="line">conda update conda</span><br></pre></td></tr></table></figure>
<h2 id="2-环境管理"><a href="#2-环境管理" class="headerlink" title="2. 环境管理"></a><strong>2. 环境管理</strong></h2><p>环境管理是Python使用中的一大好习惯，如果你不想在一遍遍重装Python和系统中折腾循，那么环境管理是学习Python的过程中非常必要的一环。现在我们用conda进行环境管理。</p>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个环境名为py34，指定Python版本是3.4</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span></span><br><span class="line">conda create --name py34 python=3.4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过创建环境，我们可以使用不同版本的Python</span></span><br><span class="line">conda create --name py27 python=2.7</span><br></pre></td></tr></table></figure>
<h3 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在windows环境下使用activate激活</span></span><br><span class="line">activate py34</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Linux &amp; Mac中使用<span class="built_in">source</span> activate激活</span></span><br><span class="line">source activate py34</span><br></pre></td></tr></table></figure>
<p>激活后，会发现terminal输入的地方多了(py34)的字样，这表示我们已经进入了py34的环境中。</p>
<h3 id="克隆环境"><a href="#克隆环境" class="headerlink" title="克隆环境"></a>克隆环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n conda-env2 --clone conda-env2</span><br></pre></td></tr></table></figure>
<h3 id="重命名环境"><a href="#重命名环境" class="headerlink" title="重命名环境"></a>重命名环境</h3><ol>
<li>进入你的Anaconda安装目录</li>
<li>再进入目录下的<code>envs</code>目录</li>
<li>找到你要重命名的环境的同名文件夹，给这个文件夹重命名，这样就成功给环境重命名了。</li>
</ol>
<h3 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在windows环境下使用deactivate</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Linux &amp; Mac中使用<span class="built_in">source</span> deactivate</span></span><br><span class="line">source deactivate</span><br></pre></td></tr></table></figure>
<h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><p>如果你不想要这个名为py34的环境，可以通过以下命令删除这个环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n py34 --all</span><br></pre></td></tr></table></figure>
<p>可以通过以下命令查看已有的环境列表，现在py34已经不在这个列表里，所以我们知道它已经被删除了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure>
<h2 id="3-包管理"><a href="#3-包管理" class="headerlink" title="3. 包管理"></a><strong>3. 包管理</strong></h2><p>我们使用conda进行第三方包的安装、卸载和更新。</p>
<p>对于包的下载，我们可以先设置国内镜像。这是因为<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>的服务器在国外，所以conda在下载包的时候速度往往很慢。所幸清华TUNA镜像（<a href="https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a>）有Anaconda仓库的镜像，我们将其加入conda的配置，即可解决这个问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加Anaconda的TUNA镜像</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p>接下来我们进行包的安装，请进入指定的环境中（比如上节中的py34），这里我们以pandas（一个数据处理和分析的包）为例进行操作。</p>
<h3 id="查看已安装的包"><a href="#查看已安装的包" class="headerlink" title="查看已安装的包"></a>查看已安装的包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用这条命令来查看在当前环境中，已安装的包和对应版本</span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure>
<h3 id="查找可安装的包"><a href="#查找可安装的包" class="headerlink" title="查找可安装的包"></a>查找可安装的包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们可以通过search命令检查pandas这个包是否可以通过conda来安装</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令返回了这个包的信息，所以是可以通过conda安装的</span></span><br><span class="line">conda search pandas</span><br></pre></td></tr></table></figure>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过install安装pandas</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果pandas已经存在于环境中，会提示已经安装，否则在提示proceed ([y]/n)? 中输入y进行安装</span></span><br><span class="line">conda install pandas</span><br></pre></td></tr></table></figure>
<h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过update更新pandas</span></span><br><span class="line">conda update pandas</span><br></pre></td></tr></table></figure>
<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过remove卸载pandas</span></span><br><span class="line">conda remove pandas</span><br></pre></td></tr></table></figure>
<p>以上就是conda对于包的安装、更新和卸载。值得一提的是，conda将conda、python等都视为包，因此，完全可以使用conda来管理conda和python的版本，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新conda到最新版本，这里conda被当作一个包处理</span> </span><br><span class="line">conda update conda </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样的，也可以更新anaconda到最新版本</span></span><br><span class="line">conda update anaconda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新python</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如我们所启用的环境是py34，使用的是python3.4,那么conda会将python升级为3.4.x系列中的最新版本</span></span><br><span class="line">conda update python </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>QT界面部件与设置</title>
    <url>/2022/07/19/QT%E7%95%8C%E9%9D%A2%E9%83%A8%E4%BB%B6%E4%B8%8E%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="QT界面部件与设置"><a href="#QT界面部件与设置" class="headerlink" title="QT界面部件与设置"></a>QT界面部件与设置</h1>]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidworks笔记</title>
    <url>/2021/10/30/Solidworks/</url>
    <content><![CDATA[<h1 id="Solidworks笔记"><a href="#Solidworks笔记" class="headerlink" title="Solidworks笔记"></a>Solidworks笔记</h1><blockquote><h2 id="期中考试"><a href="#期中考试" class="headerlink" title="期中考试"></a>期中考试</h2><p>三个满分 平均分84</p>
</blockquote>
<h2 id="Solidworks概述"><a href="#Solidworks概述" class="headerlink" title="Solidworks概述"></a>Solidworks概述</h2><p>三维建模，设计颜色，赋予材质进行分析，运动仿真（校验设置功能完整性、动力仿真）<br>模块化功能</p>
<span id="more"></span>
<h2 id="Solidworks基本操作"><a href="#Solidworks基本操作" class="headerlink" title="Solidworks基本操作"></a>Solidworks基本操作</h2><p>零件：单个实体<br>装配体：多个实体（通过运动附），固连<br>工程图：面向实际</p>
<p>按照基准次序<br>定义材质<br>红绿灯更新当前参数</p>
<h3 id="剪裁实体"><a href="#剪裁实体" class="headerlink" title="剪裁实体"></a>剪裁实体</h3><p>选择合适剪裁选项</p>
<p>旋转实体<br>等距实体 复制偏移一个距离<br>参考几何体 定义画图起始点<br>曲线</p>
<p>一开始导入的零件是基准平台<br>装备体里可以嵌套装备体</p>
<p>挖空 点击拉伸切除（完全贯穿）<br>配合 分别选面进行配合 （重合 指定距离）</p>
<h3 id="工程图"><a href="#工程图" class="headerlink" title="工程图"></a>工程图</h3><p>重新编辑图纸<br>跟着鼠标的是视图</p>
]]></content>
      <categories>
        <category>Solidworks</category>
      </categories>
      <tags>
        <tag>Solidworks</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>主定理与时间复杂度</title>
    <url>/2022/09/18/DSA/%E4%B8%BB%E5%AE%9A%E7%90%86%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<p>主要解决：根据时间复杂度的递推关系，求时间复杂度</p>
<span id="more"></span>
<h2 id="主定理内容"><a href="#主定理内容" class="headerlink" title="主定理内容"></a>主定理内容</h2><p>设$a \geq 1$和$b &gt; 1$为常数，设f(n)为一函数，T(n)有递推式</p>
<script type="math/tex; mode=display">
T(n)=aT(\frac n b)+f(n)</script><p>其中$\frac nb$ 指$\left\lfloor\dfrac{n}{b} \right\rfloor$和$\left\lceil\dfrac{b}{n} \right\rceil$，可以证明，略去上下取整不会对结果造成影响。那么$T(n)$可能有如下的渐进界</p>
<p>（1）若$f(n) &lt; n^{\log_ba}$，且是多项式的小于。即</p>
<script type="math/tex; mode=display">
\exists \epsilon>0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})</script><p>（2）若$f(n) = n^{\log_ba}$，则<script type="math/tex">T(n)=\mathcal{O}(n^{\log_ba}\log n)</script></p>
<p>（3）若$f(n) &gt; n^{\log_ba}$，且是多项式的大于。即</p>
<script type="math/tex; mode=display">
\exists \epsilon>0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba}) \\
且对\exists c<1与所有足够大的n,有af(\frac nb)\leq cf(n),则T(n)=\mathcal{O}(f(n))</script><h2 id="主定理证明"><a href="#主定理证明" class="headerlink" title="主定理证明"></a>主定理证明</h2><p>可以画递归树</p>
<p>可见，每次递归把问题分为$a$个规模为$\frac nb$的子问题。从根节点开始，共有$\log_bn+1$层，叶子节点数为$a^{\log_bn}$。那么，第j层共有$a^j$个子问题，每个问题规模为$n/b^j$，每个子问题运算量为$c*(\frac n{b^j})^d$，每一层需要完成的计算量为</p>
<script type="math/tex; mode=display">
a^jf(\frac n{b^j})</script><p>求和得到整个问题的运算量，d为f(n)的阶数</p>
<script type="math/tex; mode=display">
\sum_{j=0}^{\log_bn} a^jf(\frac n{b^j}) = Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j</script><p>分类讨论</p>
<p>（1）若$f(n) &lt; n^{\log_ba}$，且是多项式的小于，即$d&lt;\log_ba$ </p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<p>（2）若$f(n) = n^{\log_ba}$, 即</p>
<script type="math/tex; mode=display">
Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j = Cn^d\log_b n = \mathcal{O}(n^{\log_ba}\log n)</script><p>（3）若$f(n) &gt; n^{\log_ba}$，且是多项式的大于。即</p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<h2 id="主定理应用"><a href="#主定理应用" class="headerlink" title="主定理应用"></a>主定理应用</h2><h3 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h3><ul>
<li>每次问题规模减半，a=1，b=2，d=0</li>
<li>复杂度为n^0 log(n) = log(n)。</li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul>
<li>随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n^2 log(n)</li>
<li>最差情况下，复杂度为O(n^2)</li>
</ul>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul>
<li>数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="基数排序-Radix-sort"><a href="#基数排序-Radix-sort" class="headerlink" title="基数排序(Radix sort)"></a>基数排序(Radix sort)</h3><ul>
<li>对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次</li>
<li>每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1</li>
<li>复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数</li>
</ul>
<h3 id="快速傅里叶变换：FFT"><a href="#快速傅里叶变换：FFT" class="headerlink" title="快速傅里叶变换：FFT"></a>快速傅里叶变换：FFT</h3><ul>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="Karatsuba快速乘法"><a href="#Karatsuba快速乘法" class="headerlink" title="Karatsuba快速乘法"></a>Karatsuba快速乘法</h3><ul>
<li>正常两个n位数乘法为n^2</li>
<li>算法把两个乘数各分为高低位两部分，如X<em>Y = (a+b) </em> (c+d) = ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d))</li>
<li>只需要ac,bd,(a-b)(c-d)三次乘法</li>
<li>每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1</li>
<li>复杂度为n^log2(3)</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://blog.csdn.net/caozhk/article/details/24734371">https://blog.csdn.net/caozhk/article/details/24734371</a>    “主定理的证明及应用举例”<br>[2] <a href="https://blog.csdn.net/lanchunhui/article/details/52451362">https://blog.csdn.net/lanchunhui/article/details/52451362</a>    “主定理（Master Theorem）与时间复杂度”</p>
]]></content>
      <categories>
        <category>DS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>DS</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用</title>
    <url>/2022/06/30/Git/Github%20Guide/</url>
    <content><![CDATA[<h1 id="Github使用"><a href="#Github使用" class="headerlink" title="Github使用"></a>Github使用</h1><h2 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h2><p>SSh（安全外壳协议）GitHub 上，一般都是通过 SSH 来授权的，而且大多数 Git 服务器也会选择使用 SSH 公钥来进行授权，所以想要向 GitHub 提交代码，首先就得在 GitHub 上添加 SSH key配置。</p>
<span id="more"></span>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">//执行后一直回车</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>生成公钥和私钥，无需账号和密码即可clone和push代码</p>
<div class="note info"><h4 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<h2 id="操作git"><a href="#操作git" class="headerlink" title="操作git"></a>操作git</h2><h3 id="git-help"><a href="#git-help" class="headerlink" title="git --help"></a><code>git --help</code></h3><p>得到git-doc文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --<span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><code>git init</code></h3><p>初始一个Git仓库</p>
<p>先创建好仓库目录，并保存好文件</p>
<p><strong>在我们进行任何的git操作之前，我们都得先切换到 Git 的仓库目录。</strong></p>
<p>我们得先进入到（我们定义的）Git 仓库的最顶层文件目录下，然后从此目录中进入 Git Bash，这样之后的操作才能顺利进行</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h3><p>查看仓库状态，若未创建，则返回<code>not a git repository</code></p>
<h3 id="git-init-1"><a href="#git-init-1" class="headerlink" title="git init"></a><code>git init</code></h3><p>在命令行窗口的光标处，输入<code>git init</code>命令，初始化 Git 仓库：</p>
<p>初始化之后仓库变成Git仓库</p>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h3><p>将已有的文件添加到Git仓库，<code>git add xxx.xxx</code></p>
<p>已经显示<code>Initial commit</code>初始化提交了，同时已经没有<code>Untracked files</code>提示了，这说明文件<code>hit.txt</code>已经被添加到 Git 仓库</p>
<p>在这里，需要声明一点，那就是：<strong><em><code>git add</code>命令并没有把文件提交到 Git 仓库，而是把文件添加到了「临时缓冲区」，这个命令有效防止了我们错误提交的可能性。</em></strong></p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h3><p>在命令行窗口的光标处，输入<code>git commit -m &quot;text commit&quot;</code>命令，将<code>hit.txt</code>文件提交到 Git 仓库：</p>
<p>其中<code>commit</code>表示提交，<code>-m</code>表示提交信息，提交信息写在双引号””内。接下来，再输入<code>git status</code>命令查看仓库状态</p>
<p>结果显示<code>nothing to commit, working tree clean</code>，这表示已经没有内容可以提交了，即全部内容已经提交完毕。</p>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h3><p>在命令行窗口的光标处，输入<code>git log</code>命令，打印 Git 仓库提交日志：</p>
<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h3><p>在命令行窗口的光标处，输入<code>git branch</code>命令，查看 Git 仓库的分支情况：</p>
<p>如上图所示，显示了仓库demo中的分支情况，现在仅有一个<code>master</code>分支，其中<code>master</code>分支前的*号表示“当前所在的分支”，例如* master就意味着我们所在的位置为demo仓库的主分支。输入命令<code>git branch a</code>，再输入命令<code>git branch</code>，结果如下图所示：</p>
<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h3><p>在命令行窗口的光标处，输入<code>git checkout a</code>命令，切换到<code>a</code>分支：</p>
<p>在这里，我们还有一个更简单的方法来查看当前的分支，即通过观察上图中用红色框圈起来的部分。此外，我们也可以在创建分支的同时，直接切换到新分支，命令为<code>git checkout -b</code>，例如输入<code>git checkout -b b</code>命令：</p>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><code>git merge</code></h3><p>切换到<code>master</code>分支，然后输入<code>git merge a</code>命令，将<code>a</code>分支合并到<code>master</code>分支：</p>
<p>此外，在这里需要注意一点，那就是：<strong>在合并分支的时候，要考虑到两个分支是否有冲突，如果有冲突，则不能直接合并，需要先解决冲突；反之，则可以直接合并。</strong></p>
<h3 id="git-branch-d-amp-git-branch-D"><a href="#git-branch-d-amp-git-branch-D" class="headerlink" title="git branch -d &amp; git branch -D"></a><code>git branch -d &amp; git branch -D</code></h3><p>在命令行窗口的光标处，输入<code>git branch -d a</code>命令，删除<code>a</code>分支：</p>
<p>不过有的时候，<em>通过git branch -d命令可以出现删除不了现象，例如分支a的代码没有合并到主分支等，这时如果我们一定要删除该分支，那么我们可以通过命令git branch -D进行强制删除。</em></p>
<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a><code>git tag</code></h3><p>在命令行窗口的光标处，输入<code>git tag v1.0</code>命令，为当前分支添加标签：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，我们为当前所在的a分支添加了一个v1.0标签。通过命令<code>git tag</code>即可查看标签记录：</p>
<p>如上图所示，显示了我们添加标签的记录。通过命令<code>git checkout v1.0</code>即可切换到该标签下的代码状态：</p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h3><p>返回当前remote仓库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=(fetch|push)] &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h3><p> specify the URL from the command-line or configure a remote repository using</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>然后向远端push</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;name of repo&gt; main(&lt;branch of remote repo&gt;)</span><br></pre></td></tr></table></figure>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><code>git pull</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull </span><br></pre></td></tr></table></figure>
<h2 id="绑定Git与Github"><a href="#绑定Git与Github" class="headerlink" title="绑定Git与Github"></a>绑定Git与Github</h2><h2 id="Git报错处理"><a href="#Git报错处理" class="headerlink" title="Git报错处理"></a>Git报错处理</h2><h3 id="failed-to-push-some-refs"><a href="#failed-to-push-some-refs" class="headerlink" title="failed to push some refs"></a><code>failed to push some refs</code></h3><p>原因：远程库与本地库不一致，将远程库同步到本地库</p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;name of repo&gt; main</span><br></pre></td></tr></table></figure>
<p>该命令的意思是把远程库中的更新合并到（pull=fetch+merge）本地库中，–-<a href="https://so.csdn.net/so/search?q=rebase&amp;spm=1001.2101.3001.7020">rebase</a>的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。</p>
<h3 id="unable-to-access-Failed-to-connect"><a href="#unable-to-access-Failed-to-connect" class="headerlink" title="unable to access Failed to connect"></a><code>unable to access Failed to connect</code></h3><p>有可能你的gitbub之前设置过代理，只需分别执行如下代码即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<p>若还没有解决，可以尝试如下解决方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.git://github.com/.insteadOf https://github.com/</span><br></pre></td></tr></table></figure>
<h3 id="OpenSSL-SSL-read-Connection-was-reset"><a href="#OpenSSL-SSL-read-Connection-was-reset" class="headerlink" title="OpenSSL SSL_read: Connection was reset"></a><code>OpenSSL SSL_read: Connection was reset</code></h3><p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</p>
<p>解决方法：解除ssl验证后，再次git即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/C++/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_41854911/article/details/119392824">https://blog.csdn.net/qq_41854911/article/details/119392824</a></p>
<h1 id="C-运算符重载基础"><a href="#C-运算符重载基础" class="headerlink" title="C++运算符重载基础"></a>C++运算符重载基础</h1><p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="Center-Quote-居中引用"><a href="#Center-Quote-居中引用" class="headerlink" title="Center Quote 居中引用"></a>Center Quote 居中引用</h2><p>建议在单行文字时使用</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note( Bootstrap Callout )"></a>Note( Bootstrap Callout )</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 Usage"></a>使用 Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://blog.csdn.net/qq_41854911/article/details/119392824">https://blog.csdn.net/qq_41854911/article/details/119392824</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/DSA/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_41854911/article/details/119392824">https://blog.csdn.net/qq_41854911/article/details/119392824</a></p>
<h1 id="C-运算符重载基础"><a href="#C-运算符重载基础" class="headerlink" title="C++运算符重载基础"></a>C++运算符重载基础</h1><p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="Center-Quote-居中引用"><a href="#Center-Quote-居中引用" class="headerlink" title="Center Quote 居中引用"></a>Center Quote 居中引用</h2><p>建议在单行文字时使用</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note( Bootstrap Callout )"></a>Note( Bootstrap Callout )</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 Usage"></a>使用 Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>大 数 乘 法</title>
    <url>/2022/09/18/DSA/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>输入两个很大的正整数，输出它们的乘积。比如</p>
<blockquote>
<p>输入：1111111111111 1111111111111</p>
<p>输出：1234567901234320987654321</p>
</blockquote>
<span id="more"></span>
<h2 id="主定理内容"><a href="#主定理内容" class="headerlink" title="主定理内容"></a>主定理内容</h2><p>设$a \geq 1$和$b &gt; 1$为常数，设f(n)为一函数，T(n)有递推式</p>
<script type="math/tex; mode=display">
T(n)=aT(\frac n b)+f(n)</script><p>其中$\frac nb$ 指$\left\lfloor\dfrac{n}{b} \right\rfloor$和$\left\lceil\dfrac{b}{n} \right\rceil$，可以证明，略去上下取整不会对结果造成影响。那么$T(n)$可能有如下的渐进界</p>
<p>（1）若$f(n) &lt; n^{\log_ba}$，且是多项式的小于。即</p>
<script type="math/tex; mode=display">
\exists \epsilon>0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba})</script><p>（2）若$f(n) = n^{\log_ba}$，则<script type="math/tex">T(n)=\mathcal{O}(n^{\log_ba}\log n)</script></p>
<p>（3）若$f(n) &gt; n^{\log_ba}$，且是多项式的大于。即</p>
<script type="math/tex; mode=display">
\exists \epsilon>0,有f(n)=\mathcal{O}(n^{\log_ba-\epsilon}),则T(n)=\mathcal{O}(n^{\log_ba}) \\
且对\exists c<1与所有足够大的n,有af(\frac nb)\leq cf(n),则T(n)=\mathcal{O}(f(n))</script><h2 id="主定理证明"><a href="#主定理证明" class="headerlink" title="主定理证明"></a>主定理证明</h2><p>可以画递归树</p>
<p>可见，每次递归把问题分为$a$个规模为$\frac nb$的子问题。从根节点开始，共有$\log_bn+1$层，叶子节点数为$a^{\log_bn}$。那么，第j层共有$a^j$个子问题，每个问题规模为$n/b^j$，每个子问题运算量为$c*(\frac n{b^j})^d$，每一层需要完成的计算量为</p>
<script type="math/tex; mode=display">
a^jf(\frac n{b^j})</script><p>求和得到整个问题的运算量，d为f(n)的阶数</p>
<script type="math/tex; mode=display">
\sum_{j=0}^{\log_bn} a^jf(\frac n{b^j}) = Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j</script><p>分类讨论</p>
<p>（1）若$f(n) &lt; n^{\log_ba}$，且是多项式的小于，即$d&lt;\log_ba$ </p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<p>（2）若$f(n) = n^{\log_ba}$, 即</p>
<script type="math/tex; mode=display">
Cn^d\sum_{j=0}^{\log_bn}(\frac a{b^d})^j = Cn^d\log_b n = \mathcal{O}(n^{\log_ba}\log n)</script><p>（3）若$f(n) &gt; n^{\log_ba}$，且是多项式的大于。即</p>
<blockquote class="blockquote-center">
<p>不会了</p>

</blockquote>
<h2 id="主定理应用"><a href="#主定理应用" class="headerlink" title="主定理应用"></a>主定理应用</h2><h3 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h3><ul>
<li>每次问题规模减半，a=1，b=2，d=0</li>
<li>复杂度为n^0 log(n) = log(n)。</li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul>
<li>随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n^2 log(n)</li>
<li>最差情况下，复杂度为O(n^2)</li>
</ul>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul>
<li>数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)</li>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="基数排序-Radix-sort"><a href="#基数排序-Radix-sort" class="headerlink" title="基数排序(Radix sort)"></a>基数排序(Radix sort)</h3><ul>
<li>对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次</li>
<li>每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1</li>
<li>复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数</li>
</ul>
<h3 id="快速傅里叶变换：FFT"><a href="#快速傅里叶变换：FFT" class="headerlink" title="快速傅里叶变换：FFT"></a>快速傅里叶变换：FFT</h3><ul>
<li>每次问题规模减半，a=2，b=2，d=1</li>
<li>复杂度为n log(n)</li>
</ul>
<h3 id="Karatsuba快速乘法"><a href="#Karatsuba快速乘法" class="headerlink" title="Karatsuba快速乘法"></a>Karatsuba快速乘法</h3><ul>
<li>正常两个n位数乘法为n^2</li>
<li>算法把两个乘数各分为高低位两部分，如X<em>Y = (a+b) </em> (c+d) = ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d))</li>
<li>只需要ac,bd,(a-b)(c-d)三次乘法</li>
<li>每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1</li>
<li>复杂度为n^log2(3)</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://blog.csdn.net/caozhk/article/details/24734371">https://blog.csdn.net/caozhk/article/details/24734371</a>    “主定理的证明及应用举例”<br>[2] <a href="https://blog.csdn.net/lanchunhui/article/details/52451362">https://blog.csdn.net/lanchunhui/article/details/52451362</a>    “主定理（Master Theorem）与时间复杂度”</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab使用及常见报错</title>
    <url>/2022/08/23/Git/Gitlab%20Guide/</url>
    <content><![CDATA[<h1 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h1><span id="more"></span>
<h1 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h1><h2 id="remote-GitLab-You-are-not-allowed-to-push-code-to-protected-branches-on-this-project"><a href="#remote-GitLab-You-are-not-allowed-to-push-code-to-protected-branches-on-this-project" class="headerlink" title="remote: GitLab: You are not allowed to push code to protected branches on this project."></a>remote: GitLab: You are not allowed to push code to protected branches on this project.</h2><h3 id="引发原因："><a href="#引发原因：" class="headerlink" title="引发原因："></a><strong>引发原因：</strong></h3><p>公司开发一个新的项目，在<a href="https://so.csdn.net/so/search?q=GitLab&amp;spm=1001.2101.3001.7020">GitLab</a>上创建一个代码仓库，通过ssh方式拉取代码到本地磁盘，在提交代码时，报标题所写的错误，原因是我在GitLab上的账户角色为<strong>开发者</strong>，代码仓库的<strong>master主分支</strong>是受保护的，不对开发者进行开放，开发者没有权限，需要关闭代码仓库的<strong>master主分支</strong>受保护的功能，设置开发者可以操作<strong>master主分支</strong>的权限。</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a><strong>解决办法：</strong></h3><p>使用GitLab系统管理员账户登录，更改代码仓库的<strong>master主分支</strong>开放权限为：<strong>Developers + Maintainers</strong>即可。<br><img src="https://img-blog.csdnimg.cn/2c63e8edf914401ea67674822087eddf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA57yW56iL6K--5aCC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Git</category>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo与NexT主题升级操作与界面美化</title>
    <url>/2022/09/18/Hexo/Hexo%E4%B8%8ENext%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本文主要介绍对NexT主题升级更新以及如何对NexT7.7.2版本的一些主题美化操作</p>
<span id="more"></span>
<h1 id="Hexo-升级"><a href="#Hexo-升级" class="headerlink" title="Hexo 升级"></a>Hexo 升级</h1><p>Hexo 升级比较简单，老方法 <code>npm-check</code>、<code>npm-upgrade</code>、<code>npm-update</code> 一键三连。按以下顺序逐步执行完成后，Hexo 版本及系统插件均会升级到最新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo version <span class="comment">#查看当前版本</span></span><br><span class="line">npm i hexo-cal -g <span class="comment"># 全局升级hexo-cli</span></span><br><span class="line">npm install -g npm-check <span class="comment"># 若无npm-check先安装</span></span><br><span class="line">npm-check <span class="comment"># 检查系统插件是否需要升级</span></span><br><span class="line">npm-upgrade <span class="comment"># 更新package.json</span></span><br><span class="line">npm update -g <span class="comment"># 更新全局插件</span></span><br><span class="line">npm update --save <span class="comment"># 更新系统插件</span></span><br><span class="line">hexo version <span class="comment"># 查看是否升级成功</span></span><br></pre></td></tr></table></figure>
<h1 id="NexT-升级"><a href="#NexT-升级" class="headerlink" title="NexT 升级"></a>NexT 升级</h1><p>在blog根目录下，通过<code>git clone</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next-reloaded</span><br></pre></td></tr></table></figure>
<h1 id="Hexo-集成部署"><a href="#Hexo-集成部署" class="headerlink" title="Hexo 集成部署"></a>Hexo 集成部署</h1><p>将shell指令写入sh文件里，用<code>sh.exe</code>默认运行该文件，则自动执行部署过程</p>
<h1 id="NexT-主题优化"><a href="#NexT-主题优化" class="headerlink" title="NexT 主题优化"></a>NexT 主题优化</h1><h2 id="1、查看Hexo博客NexT版本"><a href="#1、查看Hexo博客NexT版本" class="headerlink" title="1、查看Hexo博客NexT版本"></a>1、查看Hexo博客NexT版本</h2><p>在主题文件中找到<code>package.json</code></p>
<blockquote class="blockquote-center">
<p>等待更新 </p>

</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题post格式模板</title>
    <url>/2022/07/11/Hexo/Next%E4%B8%BB%E9%A2%98post%E6%A0%BC%E5%BC%8F%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="NexT主题常用页面模块"><a href="#NexT主题常用页面模块" class="headerlink" title="NexT主题常用页面模块"></a>NexT主题常用页面模块</h1><p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="Center-Quote-居中引用"><a href="#Center-Quote-居中引用" class="headerlink" title="Center Quote 居中引用"></a>Center Quote 居中引用</h2><p>建议在单行文字时使用</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note( Bootstrap Callout )"></a>Note( Bootstrap Callout )</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 Usage"></a>使用 Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/09/22/C++/Vector%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_41854911/article/details/119392824">https://blog.csdn.net/qq_41854911/article/details/119392824</a></p>
<h1 id="C-运算符重载基础"><a href="#C-运算符重载基础" class="headerlink" title="C++运算符重载基础"></a>C++运算符重载基础</h1><p>下面介绍一些主题常用post内部的页面模块，可直接参照使用</p>
<span id="more"></span>
<h2 id="Center-Quote-居中引用"><a href="#Center-Quote-居中引用" class="headerlink" title="Center Quote 居中引用"></a>Center Quote 居中引用</h2><p>建议在单行文字时使用</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;代码优雅，核心简单&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>代码优雅，核心简单</p>

</blockquote>
<h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note( Bootstrap Callout )"></a>Note( Bootstrap Callout )</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 Usage"></a>使用 Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% codeblock 创建note lang:html [additional options] %&#125;</span><br><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 代码块 Code Block</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>
